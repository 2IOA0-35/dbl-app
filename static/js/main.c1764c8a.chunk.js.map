{"version":3,"sources":["data/presets.js","db.js","context/data.js","pages/home/index.js","pages/about/index.js","utils/parser-worker.js","utils/parser.js","data/list.js","pages/DataUpload/index.js","pages/visualize/components/GlobalContext.js","pages/visualize/components/CustomMenuItem.js","pages/visualize/components/GeneralOptions.js","pages/visualize/components/HEBOptions.js","pages/visualize/components/DFDOptions.js","pages/visualize/components/FDOptions.js","pages/visualize/components/FD3DOptions.js","pages/visualize/components/UserManual.js","pages/visualize/components/SelectedNode.js","pages/visualize/components/OptionsSidebar.js","pages/visualize/components/HEBVisualization.js","pages/visualize/components/DFDVisualization.js","pages/visualize/components/SaveImage.js","pages/visualize/components/FDVisualization.js","pages/visualize/components/FD3DVisualization.js","pages/visualize/components/VisContainer.js","pages/visualize/components/Timeline.js","pages/visualize/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["format","dataset","map","item","date","Date","presets","key","filename","get","a","default","length","db","Dexie","version","stores","data","DataContext","createContext","DataProvider","props","useState","undefined","setData","fileName","setFileName","loading","setLoading","useEffect","selectedDataset","localStorage","getItem","datasets","forEach","preset","push","builtin","each","find","Provider","value","name","setItem","children","Option","Select","Title","Typography","Text","home","React","useContext","history","useHistory","message","content","error","console","destroy","success","style","textAlign","className","padding","width","margin","maxWidth","src","preview","alt","title","gutter","xs","span","offset","lg","xxl","to","placement","InfoCircleOutlined","color","placeholder","size","onChange","toString","replace","type","filter","href","About","cover","marginLeft","marginRight","marginTop","extra","target","rel","Worker_fn","Worker","parse","csvString","progress","Promise","resolve","reject","parser","Parser","onmessage","e","percent","terminate","ParseError","msg","onerror","postMessage","reportProgress","readFile","file","reader","FileReader","addEventListener","event","result","percentLoaded","Math","round","loaded","total","readAsText","Error","Column","Table","DataList","onSwitch","setDatasets","getDatasets","then","dataSource","pagination","rowSelection","keys","records","selectedRowKeys","dataIndex","render","text","record","onConfirm","where","equals","delete","DeleteOutlined","fontSize","cursor","DataUpload","upload","onProgress","onError","onSuccess","endsWith","Modal","confirm","icon","FileExclamationOutlined","okText","onOk","onCancel","log","put","info","columns","count","lineHeight","customRequest","accept","onRemove","maxCount","strokeWidth","showInfo","status","fileList","UploadOutlined","justify","GlobalContext","GlobalProvider","column1","column2","graph1","graph2","timeframe","moment","previousDays","timeline","columnList","jobColors","d3","playbackSpeed","playing","selectedNode","hoveredNode","emailsSent","emailsReceived","position","globalOptions","setGlobalOptions","edgeThickness","convertEmail","colorEdgeBy","colorNodeBy","bundlingFactor","colorRange","colorFactor","removeDuplicates","HEBOptions","setHEBOptions","edgeSize","nodeSize","dynamicEdges","dynamicNodes","colorBy","nodeScaleFactor","edgeScaleFactor","DFDOptions","setDFDOptions","FDOptions","setFDOptions","linkParticles","linkArrows","edgeOpacity","FD3DOptions","setFD3DOptions","sortedDataset","sort","b","startDate","endDate","visID","options","CustomMenuItem","height","RangePicker","DatePicker","GeneralOptions","getOptions","setOptions","contextID","setType","dataGraphs","defaultValue","slice","option","label","picker","includes","min","max","onAfterChange","step","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","defaultChecked","Paragraph","UserManual","level","Panel","Collapse","SelectedNode","Email","outDegree","inDegree","Job","defaultActiveKey","header","strong","SubMenu","Menu","Sider","Layout","OptionsSidebar","collapsed","setCollapsed","showDataModal","setDataModal","renderOptions","graph","collapsible","onCollapse","breakpoint","visible","bodyStyle","destroyOnClose","footer","display","spinning","mode","defaultOpenKeys","overflowY","overflowX","selectable","Item","FileSearchOutlined","justifyContent","alignItems","marginBottom","onClick","SettingOutlined","colList","SlidersOutlined","ReadOutlined","VIS_ID","CONTEXT_ID","HEBVisualization","showLegend","update","visualisation","setVisualisation","formattedData","setFormattedData","visBox","useRef","tree","PI","radius","root","incoming","outgoing","svg","current","append","attr","node","classed","link","legend","legendHeader","html","legendContent","legendButton","on","offsetHeight","pathElements","nodeElements","highlightedEmails","previousHighlightedNodes","oldOptions","changed","nodeColor","edgeColor","line","curve","beta","d","y","angle","x","sentimentColors","sentiment","colorNode","divider","mails","mail","jobtitle","colorEdge","edge","toEmail","nodes","selectAll","leaves","enter","substr","indexOf","this","call","exit","remove","legendContentText","jobs","Map","degree","elem","select","has","set","links","flatMap","leaf","enableFastRender","selection","id","i","o","path","paths","toUnhighlight","element","selected","email","highlightedNodes","raise","jobsSorted","entries","colorRangeLabel","emailMap","jobMap","subtract","getTime","index","fromJobtitle","fromEmail","toJobtitle","time","entry","duplicatesMap","exists","array","bilink","ref","top","DFDVisualization","filteredData","setFilteredData","dragging","zoom","transform","transition","duration","manyBodyForce","linkForce","simulation","force","dragstarted","active","alphaTarget","restart","subject","fx","fy","dragged","dragended","alphaDecay","source","resize","offsetWidth","window","setTimeout","cancelHover","maxDegree","old","strength","join","currentOptions","job","ds","currentNodePresent","alpha","removeEventListener","formatted","emailDate","filtered","SaveImage","tagName","domtoimage","toPng","document","getElementById","dataUrl","createElement","download","click","cancelText","QuestionCircleOutlined","SaveFilled","FDVisualization","getBoxForce","n","curr_node","initialize","FD3DVisualization","visualization","setVisualization","updater","setUpdater","oldDates","graphData","graphDataAttribute","updateSelectedNode","updateLegend","dates","backgroundColor","linkColor","isSelectedLink","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkDirectionalArrowColor","linkDirectionalParticles","linkDirectionalParticleSpeed","linkDirectionalParticleWidth","linkOpacity","linkWidth","nodeColorer","nodeLabel","nodeLabeler","nodeOpacity","nodeRelSize","nodeVal","nodeSizer","edgeSizer","onNodeHover","handleNodeHover","onNodeClick","handleNodeClick","sender","receiver","d3Force","distance","d3ReheatSimulation","resizeObserver","ResizeObserver","observe","disconnect","neighbors","inset","VisContainer","renderVisualizations","flexGrow","borderBottom","borderLeft","Timeline","maxDate","floor","diff","asDays","marks","0","cooldown","setCooldown","add","setValue","setDiff","startLock","setStartLock","endLock","setEndLock","sortedDates","setSortedDates","timelineRef","timeout","clearTimeout","shift","difference","isAfter","isBefore","interval","sign","abs","sorted","row","onMove","dragTrack","startBounds","stopPropagation","preventDefault","state","maxValue","minValue","pos","vertical","reverse","ratio","getSliderLength","nextBounds","v","bounds","c","some","calcValueByPos","handle","moveTo","bind","lockControls","LockFilled","UnlockOutlined","speedControls","trigger","paddingRight","overlay","Link","DownOutlined","range","draggableTrack","tooltipVisible","tipFormatter","start","FastBackwardOutlined","StepBackwardOutlined","PauseOutlined","CaretRightOutlined","StepForwardOutlined","FastForwardOutlined","Content","Visualize","App","selectedKeys","useRouteMatch","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","ReactDOM","StrictMode","URL","process","origin","fetch","headers","response","contentType","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c1764c8a.chunk.js","sourcesContent":["const format = ( dataset ) => {\r\n    return dataset.map( ( item ) => ( {\r\n        ...item,\r\n        date: new Date( item.date )\r\n    } ) );\r\n};\r\n\r\nconst presets = [\r\n    {\r\n        key     : 'Enron',\r\n        filename: 'Enron',\r\n        get: async () => format( ( await import( './enron.json' ) ).default ),\r\n        length  : 31041,\r\n    },\r\n\r\n    //These can get removed when the project is finished before hand-in\r\n    /*{\r\n        key     : 'Enron Sample',\r\n        filename: 'Enron Sample',\r\n        get     : async () => format( ( await import( './enronSample.json' ) ).default ),\r\n        length  : 17,\r\n    },\r\n    {\r\n        key     : 'Enron Large',\r\n        filename: 'Enron Large',\r\n        get     : async () => format( ( await import( './enronLarge.json' ) ).default ),\r\n        length  : 217287,\r\n    }*/\r\n];\r\n\r\nexport default presets;","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie( 'DataStorageDB' );\r\n\r\ndb.version( 1 ).stores( {\r\n    data: 'key, data, filename, selected'\r\n} );\r\n\r\nexport default db;","import React, { useState, createContext, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport presets from '../data/presets';\r\nimport db from './../db';\r\n\r\n/**\r\n * @type {React.Context<[ {\r\n *  date: Date,\r\n *  fromId: number,\r\n *  fromEmail: string,\r\n *  fromJobtitle: string,\r\n *  toId: number\r\n *  toEmail: string,\r\n *  toJobtitle: string,\r\n *  messageType: 'TO'|'CC',\r\n *  sentiment: number\r\n * }[], ( data ) => void ]>}\r\n */\r\nexport const DataContext = createContext();\r\n\r\nexport function DataProvider(props) {\r\n\r\n    let [data, setData] = useState(\r\n        /**\r\n         * Dataset\r\n         * @type {{\r\n         *  date: Date,\r\n         *  fromId: number,\r\n         *  fromEmail: string,\r\n         *  fromJobtitle: string,\r\n         *  toId: number\r\n         *  toEmail: string,\r\n         *  toJobtitle: string,\r\n         *  messageType: 'TO'|'CC',\r\n         *  sentiment: number\r\n         * }[]}\r\n         */\r\n        undefined\r\n    );\r\n\r\n    let [fileName, setFileName] = useState('');\r\n\r\n    let [loading, setLoading] = useState( true );\r\n\r\n    useEffect( async () => {\r\n\r\n        let selectedDataset = localStorage.getItem( 'DATASET_SELECTED' );\r\n\r\n        let datasets = [];\r\n\r\n        presets.forEach( ( preset ) => {\r\n            datasets.push( {\r\n                ...preset,\r\n                builtin: true,\r\n            } );\r\n        } );\r\n\r\n        await db.data.each( ( item ) => {\r\n            datasets.push( {\r\n                ...item,\r\n                get: () => item.data,\r\n                length: item.data.length,\r\n            } );\r\n        } );\r\n\r\n        let dataset = datasets.find( ( dataset ) => dataset.filename == selectedDataset );\r\n\r\n        if( dataset == null ) {\r\n            setLoading( false );\r\n            return;\r\n        }\r\n\r\n        setData( await dataset.get() );\r\n        setFileName( selectedDataset );\r\n\r\n        setLoading( false );\r\n\r\n    }, [] );\r\n\r\n    let saveFileName = ( name ) => {\r\n\r\n        localStorage.setItem( 'DATASET_SELECTED', name );\r\n\r\n        setFileName( name );\r\n\r\n    };\r\n\r\n\r\n    return <DataContext.Provider value={[ data, setData, fileName, saveFileName, loading]}>{props.children}</DataContext.Provider>;\r\n}\r\n\r\nDataProvider.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n","import React from 'react';\r\nimport { Layout, Card, Typography, Button, Select, message, Row, Col, Image, Popover } from 'antd';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { DataContext } from '../../context/data';\r\nimport presets from '../../data/presets';\r\n\r\nconst { Option } = Select;\r\nconst { Title, Text } = Typography;\r\n\r\nexport default function home() {\r\n    \r\n    //eslint-disable-next-line\r\n    let [ data, setData, fileName, setFileName ] = React.useContext( DataContext );\r\n\r\n    let history = useHistory();\r\n\r\n    async function onChange( value ) {\r\n        message.loading( { content: 'Loading dataset...', key: 'Dataset-Load' } );\r\n\r\n        try {\r\n\r\n            let preset = presets.find( ( preset ) => preset.key == value );\r\n\r\n            setFileName( preset.filename );\r\n            setData( await preset.get() );\r\n        } catch ( e ) {\r\n            message.error( 'An error occurred while loading the dataset.' );\r\n            console.error( 'Error while loading dataset: ', e );\r\n\r\n            return;\r\n        }\r\n        message.destroy( 'Dataset-Load' );\r\n        \r\n        message.success( 'Successfully loaded the dataset.' );\r\n        history.push( '/vis' );\r\n    }\r\n\r\n    return (\r\n        <Layout style={{ textAlign: 'center' }} className={'container'}>\r\n            <Title style={{ padding: '20px', width: '100%', textAlign: 'center', margin: '20px 0' }}>\r\n                <Image\r\n                    style={{ width: '500px', maxWidth: '100%' }}\r\n                    src='/res/envision_banner.png'\r\n                    preview={false}\r\n                    alt='Envision Logo'\r\n                />\r\n            </Title>\r\n\r\n            <Card title='How to Use Our Data Analysis Tool ' className='card' style={{ width: '80%' }}>\r\n                <Text>\r\n                    <Row gutter={[ 48, 0 ]}>\r\n                        <Col \r\n                            xs={{ span: 24, offset: 0 }} \r\n                            lg={{ span: 15, offset: 0 }} \r\n                            xxl={{ span: 12, offset: 3 }}\r\n                            style={{ textAlign: 'justify' }}\r\n                        >\r\n                            <p>\r\n                            Welcome to our Data Analysis and Visualization tool! The first step is quite easy. You can\r\n                            choose to either pick one of our predefined datasets, or you can upload your own. When\r\n                            uploading your own dataset, please make sure that it satisfies the requirements. For more\r\n                            information about the dataset requirements, \r\n                            please go to the <Link to='/dataUpload'>Data Upload</Link> page.\r\n                            </p>\r\n                            <p>\r\n                            Once you&apos;ve selected a dataset, or uploaded your own, you can go to the\r\n                                <Link to='/vis'> Visualize</Link> page to explore the data. \r\n                            We provide tools to easily view the relations between people in email networks. \r\n                            This webapp can, for instance, \r\n                            be used to determine which jobs in a company tend to communicate with each other.\r\n                            </p>\r\n                            <p>\r\n                            If you&apos;re stuck and don&apos;t know how to use the Visualize page, you can view the\r\n                            &apos;User Manual&apos; at the bottom of the sidebar. Additionally, some options have a\r\n                            little\r\n                                <Popover content='More info about an option...' title='Info' placement='top'>\r\n                                    <InfoCircleOutlined style={{ color: '#067f5b', margin: '0 5px' }} />\r\n                                </Popover>\r\n                            next to them. When you hover over this icon, you will be presented with additional\r\n                            information regarding this specific option.\r\n                            </p>\r\n                        </Col>\r\n                        <Col xs={24} lg={9} xxl={6}>\r\n                            <p>\r\n                                <Select\r\n                                    style={{ width: '100%' }}\r\n                                    placeholder='Choose from a Sample Dataset'\r\n                                    size='large'\r\n                                    onChange={onChange}\r\n                                >\r\n                                    {presets.map( ( preset ) => \r\n                                        //The regex adds dots for thousand seperators\r\n                                        <Option value={preset.key} key={preset.key}>{preset.key} ({preset.length.toString().replace( /\\B(?=(\\d{3})+(?!\\d))/g, '.' )} e-mails)</Option>\r\n                                    )}\r\n                                </Select>\r\n                            </p>\r\n                            <p>or</p>\r\n                            <p>\r\n                                <Link to='/dataUpload'>\r\n                                    <Button style={{ width: '100%' }} type='primary' size={'large'}>\r\n                                    Upload a Dataset\r\n                                    </Button>\r\n                                </Link>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                </Text>\r\n            </Card>\r\n\r\n            <Card title='General Information' className='card' style={{ width: '80%' }}>\r\n                <Text>\r\n                    <Row gutter={[ 48, 0 ]}>\r\n                        <Col \r\n                            xs={{ span: 24, offset: 0 }} \r\n                            lg={{ span: 6, offset: 0 }}\r\n                            xxl={{ span: 4, offset: 3 }}\r\n                            // style={{ textAlign: 'justify' }}\r\n                        >\r\n                            <Image\r\n                                width={200}\r\n                                style={{ filter: 'grayscale(100%)' }}\r\n                                src='/res/tue_logo.png'\r\n                                preview={false}\r\n                                alt='TU/e Logo'\r\n                            />\r\n                        </Col>\r\n                        <Col \r\n                            xs={24} \r\n                            lg={18}\r\n                            xxl={14}\r\n                            style={{ textAlign: 'justify' }}\r\n                        >\r\n                            <p>\r\n                            This webapp was designed to visualize and display the emails sent between \r\n                            the employees of <a href='https://en.wikipedia.org/wiki/Enron'>Enron. </a> \r\n                            It should, however, be possible to use any dataset that follows the same structure.\r\n                            If you want to use a custom dataset, \r\n                            you can do so using the <Link to='/vis'>Data Upload</Link> page,\r\n                            or by clicking the button above.\r\n                            </p>\r\n                            \r\n                            <p>\r\n                            This website has been commissioned by \r\n                                <a href='https://www.tue.nl/en/'> Eindhoven University of Technology </a> \r\n                            for the course <code>DBL HTI + Webtech</code>. \r\n                            The purpose of this course is to work together as a team to make a data visualization tool.\r\n                            The website was constructed over a period of roughly 3 months by a team of 6 members.\r\n                            </p>\r\n                            <p>\r\n                            If you want to know more about the individual visualizations and team members, \r\n                            please check out the About page.\r\n                            </p>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <p>\r\n                        <Link to='/about'>\r\n                            <Button type='primary' size={'large'}>\r\n                                About\r\n                            </Button>\r\n                        </Link>\r\n                    </p>\r\n                </Text>\r\n            </Card>\r\n        </Layout>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Typography, Card } from 'antd';\r\nimport './index.css';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className='container'>\r\n            <Title style={{ padding: '20px', width: '100%', textAlign: 'center' }}>\r\n                About the visualisations\r\n            </Title>\r\n            <Card\r\n                className='left card'\r\n                title='Hierarchical Edge Bundling'\r\n                cover={\r\n                    <img\r\n                        alt='Hierarchical Edge Bundling'\r\n                        style={{ width: '50%', marginLeft: 'auto', marginRight: 'auto', marginTop: '5px' }}\r\n                        src='./res/HEB.png'\r\n                    />\r\n                }\r\n                extra={\r\n                    <a href='https://observablehq.com/@d3/hierarchical-edge-bundling' target='_blank' rel='noreferrer'>\r\n                        Source\r\n                    </a>\r\n                }\r\n            >\r\n                <Text>\r\n                    This visualisation shows all nodes around a circle with their incoming and outgoing connections.\r\n                    These connections are colored when the user hovers over a node. Nodes can also be grouped together\r\n                    by displaying them next to eachother\r\n                    <br />\r\n                    This visualisation is well suited for this project, because it can easily show incoming and outgoing\r\n                    e-mails for the employees. The way of displaying the nodes and groups of nodes is very clear and can\r\n                    be used to explore the dataset in different ways.\r\n                </Text>\r\n            </Card>\r\n\r\n            <Card\r\n                className='right card'\r\n                title='Disjoint Force-Directed Graph'\r\n                cover={\r\n                    <img\r\n                        alt='Hierarchical Edge Bundling'\r\n                        style={{ width: '50%', marginLeft: 'auto', marginRight: 'auto', marginTop: '5px' }}\r\n                        src='./res/DFG.png'\r\n                    />\r\n                }\r\n                extra={\r\n                    <a\r\n                        href='https://observablehq.com/@d3/disjoint-force-directed-graph'\r\n                        target='_blank'\r\n                        rel='noreferrer'\r\n                    >\r\n                        Source\r\n                    </a>\r\n                }\r\n            >\r\n                <Text>\r\n                    This visualisation shows the nodes and their connections by drawing lines between them. It uses\r\n                    forces to keep the nodes from becoming cluttered and to enable grouping of certain nodes. The nodes\r\n                    can be different colors, which is also well suited for grouping nodes. It is disjoint because not\r\n                    all nodes have to be connected to eachother.\r\n                    <br />\r\n                    This visualisation is a good choice for this project because it can show the emails between\r\n                    employees by displaying connections between nodes. The physical grouping of nodes and the coloring\r\n                    of nodes can be used to analyse certain groups of nodes and their email behaviour.\r\n                </Text>\r\n            </Card>\r\n\r\n            <Card\r\n                title='The D3 library'\r\n                className='left card'\r\n                extra={\r\n                    <a href='https://d3js.org' target='_blank' rel='noreferrer'>\r\n                        Source\r\n                    </a>\r\n                }\r\n            >\r\n                <Text>\r\n                    D3 is a javascript library which enables powerful visualisations in javascript apps. It allows data\r\n                    to generate a Document Object Model (DOM) and change parts of the page based on the data. This means\r\n                    it is well suited for interactive visualisations. The library also has some examples of the\r\n                    visualisations used in this project, which allows for easy implementation into this webapp.\r\n                    <br />\r\n                    Since the team was not very experienced with visualizations for a webapp and the visualisations used\r\n                    in the project needed to be interactive D3 was an ideal choice for a visualisation library.\r\n                </Text>\r\n            </Card>\r\n\r\n            <hr style={{ width: '80%' }} />\r\n\r\n            <Title style={{ padding: '20px', width: '100%', textAlign: 'center' }}>About us</Title>\r\n\r\n            <Card title='Christine Jacob' className='right card'>\r\n                <Text> I am a First Year student studying Bachelor of Computer Science. I worked on the Home Page, Interim Report and Navigation. Through this course I have developed an interest to learn about web development and learned how simple and logical it can be!</Text>\r\n            </Card>\r\n\r\n            <Card title='Tom van Liempd' className='left card'>\r\n                <Text>\r\n                    Hi, I am Tom. I am a first year student for the Computer Science Bachelor. \r\n                    For Envision I have mainly focussed on organisational work and setting up the base layer for our app.\r\n                    Since I already have quite extensive experience with web development and especially React (which Envision runs on), I have helped set-up various bits of the application.\r\n                    One of these is making the Enron dataset compatible with the Hierarchical Edge Bundling visualisation drawn by our visualisation library D3.\r\n                </Text>\r\n            </Card>\r\n\r\n            <Card title='Aloys Riswick' className='right card'>\r\n                <Text>\r\n                    <p>\r\n                        {`\r\n                        Hey there! \r\n                        My name is Aloys and I'm a fist year Computer Science students at the TU/e.\r\n                        Personally, I'm quite interested in web development, \r\n                        so working on this website was a fun experience for me. \r\n                        For this website I was heavily involved in the initial layout of the 'Visualize' page.\r\n                        I also worked on implementing the visualization together with the others.\r\n                        Apart from that I worked on some minor features and \r\n                        occasionally I fix margins or styles that are of by a few pixels. \r\n                        When I notice that something is just slightly off, I can't help but fix it, \r\n                        sometimes to the annoyance of my team members perhaps.\r\n                        `}\r\n                    </p>\r\n                    <p>\r\n                        {`\r\n                        I really enjoyed this project and \r\n                        I believe that this is largely due to the amazing team I got to work with. \r\n                        I hope that I can use the experience gained from this project in my future endeavors and \r\n                        I wouldn't mind working with this team again!\r\n                        `}\r\n                    </p>\r\n                </Text>\r\n            </Card>\r\n\r\n            <Card title='Hugo van Schalm' className='left card'>\r\n                <Text>\r\n                    Hey, my name is Hugo and I&apos;m a first year student at the Computer Science Bachelor.\r\n                    For this project I mostly helped creating some features for the visualisations, like panning, zooming and the legend.\r\n                    I had a lot of fun working on this project. I had to learn React and D3 from scratch, but to me that was a lot of fun.\r\n                </Text>\r\n            </Card>\r\n\r\n            <Card title='Kristopher Alex Schlett' className='right card'>\r\n                <Text>\r\n                    Hello! My name is Kris and I&apos;m also a first year student taking the Bachelor of Computer Science and Engineering.\r\n                    When it comes to Envision, I contributed with mostly creating graph features such as variable node size, zooming/panning, and an Infobox.\r\n                    Working on this project was a very good, and interesting, experience as I have not worked on such a large scale product prior to Envision.\r\n                    In addition, learning the selected languages was a fun challenge since I had never used them beforehand.  \r\n                </Text>\r\n            </Card>\r\n\r\n            <Card title='Anke Staal' className='left card'>\r\n                <Text>\r\n                    Hi! My name is Anke Staal and I am 20 years old. I am a second year Psychology &amp; Technology student at the TU/e and \r\n                    I currently live in Eindhoven together with my six roommates. At the beginning I didn&apos;t have a lot of prior knowledge about anything related to\r\n                    HTML, CSS, JavaScript or React, so I believe I have learned a lot from this project. I enjoyed working together and making something that we are proud of \r\n                    and I hope that people like it.\r\n                </Text>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/parser-worker.f8582fea.worker.js\");\n}\n","import Parser from 'worker-loader!./parser-worker';\r\n\r\n/**\r\n * Parse a csv in the form of a string to a JSON object.\r\n * \r\n * @param {string} csvString\r\n * @param {( percentage: number ) => void} [progress] Optional callback that receives progress updates with a percentage (0-100)\r\n * @returns {Promise<{\r\n *  date: Date,\r\n *  fromId: number,\r\n *  fromEmail: string,\r\n *  fromJobtitle: string,\r\n *  toId: number\r\n *  toEmail: string,\r\n *  toJobtitle: string,\r\n *  messageType: 'TO'|'CC',\r\n *  sentiment: number\r\n * }[]>}\r\n */\r\nexport default function parse( csvString, progress ) {\r\n\r\n    return new Promise( ( resolve, reject ) => {\r\n\r\n        var parser = new Parser();\r\n\r\n        parser.onmessage = ( e ) => {\r\n            switch ( e.data.type ) {\r\n                case 'PROGRESS': {\r\n                    progress( e.data.percent );\r\n                    break;\r\n                }\r\n                case 'FINISHED': {\r\n                    parser.terminate();\r\n                    resolve( e.data.data );\r\n                    break;\r\n                }\r\n                case 'PARSEERROR': {\r\n                    parser.terminate();\r\n                    reject( new ParseError( e.data.msg ) );\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n        parser.onerror = ( e ) => {\r\n            parser.terminate();\r\n            reject( e );\r\n        };\r\n\r\n        parser.postMessage( { reportProgress: progress != null, csvString: csvString } );\r\n\r\n    } );\r\n\r\n}\r\n\r\n/**\r\n * Reads a file that has been uploaded by the user and returns a string that contains the file content\r\n * @param {File} file File that has been uploaded by the user\r\n * @param {( percentage: number ) => void} [progress] Optional callback that receives progress updates with a percentage (0-100)\r\n * @returns {Promise<string>} Promise (asynchronous) with file content (can be passed to the parse function)\r\n */\r\nexport function readFile( file, progress ) {\r\n    return new Promise( ( resolve, reject ) => {\r\n\r\n        let reader = new FileReader();\r\n\r\n        reader.addEventListener( 'load', ( event ) => {\r\n            resolve( event.target.result );\r\n        } );\r\n\r\n        if ( progress )\r\n            reader.addEventListener( 'progress', ( event ) => {\r\n                var percentLoaded = Math.round( ( event.loaded / event.total ) * 100 );\r\n\r\n                progress( percentLoaded );\r\n            } );\r\n\r\n        reader.addEventListener( 'error', ( event ) => {\r\n            reject( event );\r\n        } );\r\n\r\n        reader.readAsText( file );\r\n\r\n    } );\r\n}\r\n\r\nexport class ParseError extends Error {\r\n    constructor( message ) {\r\n        super( message );\r\n        this.name = 'ParseError';\r\n    }\r\n}","import { DeleteOutlined } from '@ant-design/icons';\r\nimport { Table, Tooltip, message, Popconfirm } from 'antd';\r\nimport React from 'react';\r\nimport db from '../db';\r\nimport { DataContext } from '../context/data';\r\nimport presets from './presets';\r\n\r\nconst { Column } = Table;\r\n\r\n//eslint-disable-next-line\r\nexport default function DataList( { title, onSwitch }) {\r\n\r\n    //eslint-disable-next-line\r\n    let [ data, setData, fileName, setFileName ] = React.useContext( DataContext );\r\n\r\n    //Stores the datasets that have been retrieved from the db\r\n    let [ datasets, setDatasets ] = React.useState( null );\r\n\r\n    let getDatasets = () => {\r\n        let datasets = [];\r\n\r\n        presets.forEach( ( preset ) => {\r\n            datasets.push( {\r\n                ...preset,\r\n                builtin: true,\r\n            } );\r\n        } );\r\n\r\n        db.data.each( ( item ) => {\r\n            datasets.push( {\r\n                ...item,\r\n                length: item.data.length,\r\n            } );\r\n        } ).then( () => {\r\n            setDatasets( datasets );\r\n        } );\r\n    };\r\n\r\n    React.useEffect( () => {\r\n\r\n        getDatasets();\r\n\r\n    }, [] );\r\n\r\n    return (\r\n        <Table\r\n            dataSource={datasets}\r\n            loading={datasets == null}\r\n            pagination={false}\r\n            className='datasets'\r\n            rowSelection={{\r\n                type: 'radio',\r\n                onChange: async ( keys, records ) => {\r\n\r\n                    message.loading( { content: 'Loading dataset...', key: 'Dataset-Change' } );\r\n\r\n                    let data = records[ 0 ].data;\r\n\r\n                    if( records[ 0 ].builtin )\r\n                        data = await records[ 0 ].get();\r\n\r\n                    setData( data );\r\n                    setFileName( records[ 0 ].filename );\r\n\r\n                    message.destroy( 'Dataset-Change' );\r\n                    message.success( 'Successfully loaded the dataset.' );\r\n\r\n                    if( onSwitch )\r\n                        onSwitch();\r\n                },\r\n                selectedRowKeys: datasets?.filter( ( dataset ) => dataset.filename == fileName ).map( ( dataset ) => dataset.key )\r\n            }}\r\n        >\r\n            <Column title='Name' dataIndex='filename' key='filename' />\r\n            <Column title='Row Count' render={( text, record ) => record?.length?.toString().replace( /\\B(?=(\\d{3})+(?!\\d))/g, '.' )} />\r\n            <Column\r\n                key='action'\r\n                render={( text, record ) =>\r\n                    record.builtin ? \r\n                        <span style={{ color: '#888' }}>Preset</span>\r\n                        : \r\n                        <Tooltip title='Delete Dataset' placement='bottom'>\r\n                            <Popconfirm\r\n                                title='Are you sure you want to delete this dataset?'\r\n                                onConfirm={async () => {\r\n                                    await db.data.where( 'key' ).equals( record.key ).delete();\r\n\r\n                                    if( fileName == record.filename ) {\r\n                                        setFileName( null );\r\n                                        setData( null );\r\n                                    }\r\n\r\n                                    getDatasets();\r\n                                }}\r\n                            >\r\n                                <DeleteOutlined style={{ fontSize: 20, color: '#067f5b', marginTop: 3, cursor: 'pointer' }}/>\r\n                            </Popconfirm>\r\n                        </Tooltip>\r\n                }\r\n            />\r\n        </Table>\r\n    );\r\n}","import { InfoCircleOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card,\r\n    Col,\r\n    Divider,\r\n    Layout,\r\n    message,\r\n    Popover,\r\n    Row,\r\n    Table,\r\n    Typography,\r\n    Upload,\r\n    Modal\r\n} from 'antd';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DataContext } from '../../context/data';\r\nimport { FileExclamationOutlined } from '@ant-design/icons';\r\nimport './DataUpload.css';\r\nimport parse, { readFile } from '../../utils/parser';\r\nimport db from '../../db';\r\nimport DataList from '../../data/list';\r\n\r\nconst { Title, Text } = Typography;\r\n// functionality for buttons, checkbox to be added\r\n\r\nexport default function DataUpload() {\r\n\r\n    //eslint-disable-next-line\r\n    let [ data, setData, fileName, setFileName ] = React.useContext( DataContext );\r\n\r\n    const upload = async ( { onProgress, onError, onSuccess, file } ) => {\r\n        try {\r\n\r\n            let filename = file.name;\r\n\r\n            if( !filename.endsWith( '.csv' ) )\r\n                filename += '.csv';\r\n\r\n            if( await db.data.get( filename ) !== undefined ) {\r\n\r\n                let overwrite = await new Promise( ( resolve ) => Modal.confirm( {\r\n                    title: 'Overwrite File',\r\n                    icon: <FileExclamationOutlined />,\r\n                    content: 'A file with the same name was already uploaded previously. Do you want to overwrite it?',\r\n                    okText: 'Overwrite',\r\n                    onOk() {\r\n                        resolve( true );\r\n                    },\r\n                    onCancel() {\r\n                        resolve( false );\r\n                    },\r\n                } ) );\r\n\r\n                if( overwrite ) {\r\n                    await db.data.where( 'filename' ).equals( filename ).delete();\r\n\r\n                    //Check if thi was the current active dataset, if so, set to null\r\n                    if( fileName == filename ) {\r\n                        setFileName( null );\r\n                        setData( null );\r\n                    }\r\n                } else {\r\n                    onError();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let content = await readFile( file, ( percent ) => {\r\n                console.log( 'progress read', percent );\r\n                onProgress( { percent: percent / 2 } );\r\n            } );\r\n\r\n            let data = await parse( content, ( percent ) => {\r\n                console.log( 'progress parse', percent );\r\n                onProgress( { percent: percent / 2 + 49 } );\r\n            } );\r\n\r\n            db.data.put( { key: filename, data: data, filename: filename } );\r\n\r\n            onProgress( { percent: 100 } );\r\n\r\n            setFileName( filename );\r\n            setData( data );\r\n\r\n            onSuccess( `Successfully parsed ${data.length} rows.` );\r\n        } catch ( e ) {\r\n            console.error( e );\r\n\r\n            setData( null );\r\n\r\n            onError( e );\r\n        }\r\n    };\r\n\r\n    /*\r\n     *  date: Date,\r\n     *  fromId: number,\r\n     *  fromEmail: string,\r\n     *  fromJobtitle: string,\r\n     *  toId: number\r\n     *  toEmail: string,\r\n     *  toJobtitle: string,\r\n     *  messageType: 'TO'|'CC',\r\n     *  sentiment: number\r\n     */\r\n    const columns = [\r\n        {\r\n            title: 'Column Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: '20px'\r\n        },\r\n        {\r\n            title: 'Data Type',\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            width: 1\r\n        }\r\n    ];\r\n\r\n    const dataCSV = [\r\n        { key: 'date', name: 'date', type: 'Date' },\r\n        { key: 'fromID', name: 'fromID', type: 'number' },\r\n        { key: 'fromEmail', name: 'fromEmail', type: 'string' },\r\n        { key: 'fromJobtitle', name: 'fromJobtitle', type: 'string' },\r\n        { key: 'toId', name: 'toId', type: 'number' },\r\n        { key: 'toEmail', name: 'toEmail', type: 'string' },\r\n        { key: 'toJobtitle', name: 'toJobtitle', type: 'string' },\r\n        { key: 'messageType', name: 'messageType', type: 'TO | CC' },\r\n        { key: 'sentiment', name: 'sentiment', type: 'number' }\r\n    ];\r\n\r\n    const info = (\r\n        <div>\r\n            <p>\r\n                The CSV file should consist of <br />\r\n                the following columns and types:\r\n            </p>\r\n            <Table dataSource={dataCSV} columns={columns} pagination={false} size='small' />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Layout style={{ textAlign: 'center' }} className={'container'}>\r\n            <Title style={{ padding: '20px', width: '100%', textAlign: 'center' }}>Upload Dataset</Title>\r\n            <Card className='card' style={{ width: '80%' }}>\r\n                <Text>\r\n                    <p>Please upload dataset in CSV format:\r\n                        <Popover content={info} placement='bottom'>\r\n                            <Badge count={<InfoCircleOutlined style={{ color: '#067f5b', lineHeight: '22px', marginLeft: '5px' }} />} />\r\n                        </Popover>\r\n                    </p>\r\n\r\n                    <Upload\r\n                        customRequest={upload}\r\n                        accept='.csv'\r\n                        onRemove={() => { setData( null ); setFileName( null ); }}\r\n                        maxCount={1}\r\n                        progress={{ strokeWidth: 5, showInfo: true }}\r\n                        className={'data-upload'}\r\n                        onChange={( info ) => {\r\n                            if ( info.file.status !== 'uploading' ) {\r\n                                console.log( info.file, info.fileList );\r\n                            }\r\n                            if ( info.file.status === 'done' ) {\r\n                                message.success(\r\n                                    `${info.file.name} file uploaded successfully.`\r\n                                );\r\n                            } else if ( info.file.status === 'error' ) {\r\n                                message.error(\r\n                                    `${info.file.name} file upload failed.`,\r\n                                    5\r\n                                );\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Button type='primary' size='large'>\r\n                            <UploadOutlined /> Upload File\r\n                        </Button>\r\n                    </Upload>\r\n                    <p style={{ margin: '20px 0 0 10px' }}>All data will only be stored locally and not uploaded to the internet.</p>\r\n                    <Divider />\r\n                    <p>Available datasets:</p>\r\n                    <DataList key={fileName} />\r\n                    <Divider style={{ marginTop: '-1px' }} />\r\n                    <Row justify='center' gutter={[ 48, 0 ]}>\r\n                        <Col span={12} style={{ textAlign: 'end' }}>\r\n                            <Button type='ghost'>\r\n                                <Link to='/vis'>Go to Visualize</Link>\r\n                            </Button>\r\n                        </Col>\r\n                        <Col span={12} style={{ textAlign: 'start' }}>\r\n                            <Button type='ghost'>\r\n                                <Link\r\n                                    to='/vis'\r\n                                    target='_blank'\r\n                                >\r\n                                Open Visualization in New Tab\r\n                                </Link>\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Text>\r\n            </Card>\r\n            <Card className='card' title='About the Data Upload Tool' style={{ width: '80%' }}>\r\n                <Text>\r\n                    <p>\r\n                    On this page you can upload your own dataset and use our visualization tools to explore the data.\r\n                    The file must be in <code>.csv</code>, which stands for{' '}\r\n                        <a href='https://en.wikipedia.org/wiki/Comma-separated_values'>comma-separated values</a> and is a\r\n                    common file type amongst data handling software.\r\n                    </p>\r\n                </Text>\r\n            </Card>\r\n        </Layout>\r\n    );\r\n}\r\n","import React, { useState, createContext, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport { DataContext } from '../../../context/data';\r\nimport * as d3 from 'd3';\r\n\r\nexport const GlobalContext = createContext();\r\n\r\n/**\r\n * Provides the global context with all variables shared across the visualization page.\r\n */\r\nexport function GlobalProvider( props ) {\r\n\r\n    //Default global options controlled by the GeneralOptions component\r\n    const [ globalOptions, setGlobalOptions ] = useState( {\r\n        column1: 'fromEmail',\r\n        column2: 'toEmail',\r\n        graph1: 'Hierarchical Edge Bundling',\r\n        graph2: 'None',\r\n        timeframe: [ moment( '19981112', 'YYYYMMDD' ), moment( '20020620', 'YYYYMMDD' ) ],\r\n        previousDays: 10,\r\n        timeline: moment( '19981112', 'YYYYMMDD' ),\r\n        columnList: [\r\n            'None',\r\n            'date',\r\n            'fromId',\r\n            'fromEmail',\r\n            'fromJobtitle',\r\n            'toId',\r\n            'toEmail',\r\n            'toJobtitle',\r\n            'messageType',\r\n            'sentiment'\r\n        ],\r\n        jobColors: d3.scaleOrdinal(d3.schemeCategory10), \r\n        playbackSpeed: 1,\r\n        playing: false,\r\n        selectedNode: null,\r\n        hoveredNode: null,\r\n        emailsSent: 0,\r\n        emailsReceived: 0,\r\n        position: null\r\n    } );\r\n    \r\n    //Default options for the HEB controlled by the HEBOptions component\r\n    const [ HEBOptions, setHEBOptions ] = useState( {\r\n        edgeThickness: 1,\r\n        convertEmail: true,\r\n        colorEdgeBy: 'None',\r\n        colorNodeBy: 'None',\r\n        bundlingFactor: 0.85,\r\n        colorRange: 'Viridis',\r\n        colorFactor: 25,\r\n        removeDuplicates: true\r\n    } );\r\n    //Default options for the DFD controlled by the DFDOptions component\r\n    const [ DFDOptions, setDFDOptions ] = useState( {\r\n        edgeSize: 50,\r\n        nodeSize: 5,\r\n        dynamicEdges: true,\r\n        dynamicNodes: true,\r\n        colorBy: true,\r\n        nodeScaleFactor: 3,\r\n        edgeScaleFactor: 5\r\n    } );\r\n    //Default options for the FD controlled by the FDOptions component\r\n    const [ FDOptions, setFDOptions ] = useState( {\r\n        edgeSize: 20,\r\n        nodeSize: 5,\r\n        dynamicEdges: true,\r\n        dynamicNodes: true,\r\n        colorBy: true,\r\n        nodeScaleFactor: 3,\r\n        edgeScaleFactor: 5\r\n    } );\r\n    //Default options for the FD3D controlled by the FD3DOptions component\r\n    const [ FD3DOptions, setFD3DOptions ] = useState( {\r\n        edgeSize: 50,\r\n        nodeSize: 5,\r\n        dynamicNodes: true,\r\n        colorBy: true,\r\n        nodeScaleFactor: 3,\r\n        linkParticles: true,\r\n        linkArrows: false,\r\n        edgeOpacity: 0.2\r\n    } );\r\n\r\n    //Gets the correct state based on the visID\r\n    const getOptions = ( visID ) => {\r\n        switch ( visID ) {\r\n            case 'Global':\r\n                return globalOptions;\r\n            case 'Hierarchical Edge Bundling':\r\n                return HEBOptions;\r\n            case 'Disjoint Force-Directed':\r\n                return DFDOptions;\r\n            case 'Force-Directed Graph':\r\n                return FDOptions;\r\n            case 'Arc Diagram':\r\n                return {};\r\n            case '3D Force-Directed Graph':\r\n                return FD3DOptions;\r\n\r\n            default:\r\n                return {};\r\n        }\r\n    };\r\n    //Sets the correct state based on ID and options selected\r\n    const setOptions = ( visID, options ) => {\r\n        switch ( visID ) {\r\n            case 'Global':\r\n                setGlobalOptions( options );\r\n                break;\r\n            case 'Hierarchical Edge Bundling':\r\n                setHEBOptions( options );\r\n                break;\r\n            case 'Disjoint Force-Directed':\r\n                setDFDOptions( options );\r\n                break;\r\n            case 'Force-Directed Graph':\r\n                setFDOptions( options );\r\n                break;\r\n            case 'Arc Diagram':\r\n                break;\r\n            case '3D Force-Directed Graph':\r\n                setFD3DOptions( options );\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    \r\n    //Gets the dataset from the DataContext and stores it in the dataset variable\r\n    let [ dataset ] = React.useContext( DataContext );\r\n\r\n    useEffect( () => {\r\n\r\n        if( dataset == null )\r\n            return;\r\n\r\n        //Sort the dataset based on e-mail date\r\n        let sortedDataset = dataset.sort( ( a, b ) => {\r\n            return a.date - b.date;\r\n        } );\r\n\r\n        let startDate = moment( sortedDataset[ 0 ].date );\r\n        let endDate   = moment( sortedDataset[ sortedDataset.length - 1 ].date );\r\n\r\n        setGlobalOptions( {\r\n            ...globalOptions,\r\n            timeframe: [ startDate, endDate ]\r\n        } );\r\n\r\n    }, [ dataset ] );\r\n\r\n    return <GlobalContext.Provider value={[ getOptions, setOptions ]}>{props.children}</GlobalContext.Provider>;\r\n}\r\n\r\nGlobalProvider.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CustomMenuItem.css';\r\nimport { Badge, Popover, Space } from 'antd';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\n/**\r\n * Provides a premade sidebar menu item component\r\n */\r\nexport default function CustomMenuItem( { title, children, height, info } ) {\r\n    height *= 40;\r\n\r\n    return (\r\n        <li className='custom-menu-item' style={{ height: { height } }}>\r\n            <Space>\r\n                {title}\r\n                {info && (\r\n                    <Popover content={info} title='Info' placement='right'>\r\n                        <Badge count={<InfoCircleOutlined style={{ color: '#067f5b' }} />} />\r\n                    </Popover>\r\n                )}\r\n            </Space>\r\n            {children}\r\n        </li>\r\n    );\r\n}\r\n\r\nCustomMenuItem.propTypes = {\r\n    info: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node,\r\n    height: PropTypes.string.isRequired\r\n};\r\n","import React, { useContext, useState } from 'react';\r\nimport { Select, Space, DatePicker } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { GlobalContext } from './GlobalContext';\r\n\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\n/**\r\n * Renders all general options in the sidebar\r\n */\r\nexport default function GeneralOptions() {\r\n    const [ getOptions, setOptions ] = useContext( GlobalContext );\r\n\r\n    const contextID = 'Global';\r\n\r\n    const [ type, setType ] = useState( 'Date' );\r\n\r\n    const { graph1, graph2, timeframe } = getOptions( contextID );\r\n\r\n    const dataGraphs = [\r\n        'None',\r\n        'Hierarchical Edge Bundling',\r\n        'Disjoint Force-Directed',\r\n        'Force-Directed Graph',\r\n        //'Arc Diagram',\r\n        '3D Force-Directed Graph'\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <CustomMenuItem title='Which graph(s) do you want to display?' height='3'>\r\n                <Select\r\n                    defaultValue={graph1}\r\n                    style={{ width: '100%' }}\r\n                    onChange={( event ) => {\r\n                        setOptions( contextID, { ...getOptions( contextID ), graph1: event } );\r\n                    }}\r\n                    options={dataGraphs.slice( 1 ).map( ( option ) => ( { label: option, value: option } ) )}\r\n                />\r\n                <Select\r\n                    defaultValue={graph2}\r\n                    style={{ width: '100%' }}\r\n                    onChange={( event ) => {\r\n                        setOptions( contextID, { ...getOptions( contextID ), graph2: event } );\r\n                    }}\r\n                    options={dataGraphs.map( ( option ) => ( { label: option, value: option } ) )}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Select a specific timeframe:' info='This will change the range of the timeline to fit to your selection' height='2'>\r\n                <Space>\r\n                    <Select value={type} onChange={setType}>\r\n                        <Option value='date'>Date</Option>\r\n                        <Option value='week'>Week</Option>\r\n                        <Option value='month'>Month</Option>\r\n                        <Option value='quarter'>Quarter</Option>\r\n                        <Option value='year'>Year</Option>\r\n                    </Select>\r\n                    <RangePicker\r\n                        picker={type}\r\n                        onChange={( event ) => {\r\n                            setOptions( contextID, {\r\n                                ...getOptions( contextID ),\r\n                                timeframe: [ event[0], event[1] ]\r\n                            } );\r\n                        }}\r\n                        value={timeframe}\r\n                    />\r\n                </Space>\r\n            </CustomMenuItem>\r\n        </div>\r\n    );\r\n}\r\n\r\nGeneralOptions.propTypes = {\r\n    colList: PropTypes.array.isRequired\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { Slider, Select, Switch } from 'antd';\r\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { GlobalContext } from './GlobalContext';\r\n\r\n/**\r\n * Renders all HEB graph sidebar options\r\n */\r\nexport default function HEBOptions() {\r\n    const visID = 'Hierarchical Edge Bundling';\r\n\r\n    const [ getOptions, setOptions ] = useContext( GlobalContext );\r\n\r\n    const { edgeThickness, convertEmail, colorEdgeBy, colorNodeBy, bundlingFactor, colorRange, colorFactor, removeDuplicates } =\r\n        getOptions( visID );\r\n\r\n    const edgeOptions = [ 'None', 'Sentiment', \"Sender's Jobtitle\", \"Receiver's Jobtitle\" ];\r\n    const nodeOptions = [ 'None', 'Average Sentiment', 'Minimum Sentiment', 'Maximum Sentiment', \"Sender's Jobtitle\" ];\r\n    const colorOptions = [ 'Viridis', 'Turbo', 'Inferno', 'Plasma', 'Warm', 'Cool' ];\r\n\r\n    return (\r\n        <div>\r\n            <CustomMenuItem title='Color edges based on:' height='2'>\r\n                <Select\r\n                    style={{ width: '100%' }}\r\n                    defaultValue={colorEdgeBy}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), colorEdgeBy: event } );\r\n                    }}\r\n                    options={edgeOptions.map( ( option ) => ( { label: option, value: option } ) )}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Color nodes based on:' info='This will change the color of the text of the nodes' height='2'>\r\n                <Select\r\n                    style={{ width: '100%' }}\r\n                    defaultValue={colorNodeBy}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), colorNodeBy: event } );\r\n                    }}\r\n                    options={nodeOptions.map( ( option ) => ( { label: option, value: option } ) ) }\r\n                />\r\n            </CustomMenuItem>\r\n            {( colorEdgeBy.includes( 'Sentiment' ) || colorNodeBy.includes( 'Sentiment' ) ) && (\r\n                <>\r\n                    <CustomMenuItem title='Color range:' info='Determines which color range is used to color sentiment. In general, darker means lower sentiment.' height='2'>\r\n                        <Select\r\n                            style={{ width: '100%' }}\r\n                            defaultValue={colorRange}\r\n                            onChange={( event ) => {\r\n                                setOptions( visID, { ...getOptions( visID ), colorRange: event } );\r\n                            }}\r\n                            options={colorOptions.map( ( option ) => ( { label: option, value: option } ) )}\r\n                        />\r\n                    </CustomMenuItem>\r\n                    <CustomMenuItem\r\n                        title='Color sensitivity factor:'\r\n                        info='How sensitive the color is to changes in sentiment. Higher values cause loss of detail in extreme sentiment values.'\r\n                        height='2'\r\n                    >\r\n                        <Slider\r\n                            min={1}\r\n                            max={50}\r\n                            defaultValue={colorFactor}\r\n                            onAfterChange={( event ) => {\r\n                                setOptions( visID, { ...getOptions( visID ), colorFactor: event } );\r\n                            }}\r\n                        />\r\n                    </CustomMenuItem>\r\n                </>\r\n            )}\r\n            <CustomMenuItem title='Default edge thickness:' height='2'>\r\n                <Slider\r\n                    min={1}\r\n                    max={10}\r\n                    defaultValue={edgeThickness}\r\n                    onAfterChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), edgeThickness: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem\r\n                title='Edge bundling factor:'\r\n                info='Determines how strongly the edges are bundled together.'\r\n                height='2'\r\n            >\r\n                <Slider\r\n                    min={0}\r\n                    max={1}\r\n                    step={0.01}\r\n                    defaultValue={bundlingFactor}\r\n                    onAfterChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), bundlingFactor: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem\r\n                title='Convert E-Mail to name:'\r\n                info=\"Will try to extract a person's name from their E-Mail address.\"\r\n                height='2'\r\n            >\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={convertEmail}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), convertEmail: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n\r\n            <CustomMenuItem\r\n                title='Remove Duplicate Edges:'\r\n                info='Remove duplicate edges when two or more e-mails were sent between the same employees. This might cause some detail to be lost, but will increase performance.'\r\n                height='2'\r\n            >\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={removeDuplicates}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), removeDuplicates: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Slider, Switch } from 'antd';\r\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { GlobalContext } from './GlobalContext';\r\n\r\n/**\r\n * Renders all Disjoint Force-Directed graph sidebar options\r\n */\r\nexport default function DFDOptions() {\r\n    const visID = 'Disjoint Force-Directed';\r\n\r\n    const [ getOptions, setOptions ] = useContext( GlobalContext );\r\n\r\n    const { edgeSize, nodeSize, dynamicEdges, dynamicNodes, colorBy, nodeScaleFactor, edgeScaleFactor } =\r\n        getOptions( visID );\r\n\r\n    return (\r\n        <div>\r\n            <CustomMenuItem defaultValue={colorBy} title='Color nodes based on job:' height='2'>\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={colorBy}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), colorBy: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Default node size:' info='Controls the size of the circles in the visualization' height='2'>\r\n                <Slider\r\n                    min={1}\r\n                    max={20}\r\n                    defaultValue={nodeSize}\r\n                    onAfterChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), nodeSize: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Default edge size:' info='Controls the length of the edges' height='2'>\r\n                <Slider\r\n                    max={200}\r\n                    defaultValue={edgeSize}\r\n                    onAfterChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), edgeSize: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem\r\n                title='Make nodes larger based on degree:'\r\n                info='May be overwhelming with few nodes.'\r\n                height='2'\r\n            >\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={dynamicNodes}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), dynamicNodes: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            {dynamicNodes && (\r\n                <CustomMenuItem\r\n                    title='Node scale factor:'\r\n                    info='By how much the radius of nodes with a high degree will be multiplied.'\r\n                    height='2'\r\n                >\r\n                    <Slider\r\n                        min={1}\r\n                        max={10}\r\n                        defaultValue={nodeScaleFactor}\r\n                        onAfterChange={( event ) => {\r\n                            setOptions( visID, { ...getOptions( visID ), nodeScaleFactor: event } );\r\n                        }}\r\n                    />\r\n                </CustomMenuItem>\r\n            )}\r\n            <CustomMenuItem\r\n                title='Make edges larger based on frequency:'\r\n                info='More noticeable with many links.'\r\n                height='2'\r\n            >\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={dynamicEdges}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), dynamicEdges: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            {dynamicEdges && (\r\n                <CustomMenuItem\r\n                    title='Edge scale factor:'\r\n                    info='Controls how much the edge size will increase depending on the total amount of links.'\r\n                    height='2'\r\n                >\r\n                    <Slider\r\n                        min={1}\r\n                        max={20}\r\n                        defaultValue={edgeScaleFactor}\r\n                        onAfterChange={( event ) => {\r\n                            setOptions( visID, { ...getOptions( visID ), edgeScaleFactor: event } );\r\n                        }}\r\n                    />\r\n                </CustomMenuItem>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Slider, Switch } from 'antd';\r\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { GlobalContext } from './GlobalContext';\r\n\r\nexport default function FDOptions() {\r\n    const visID = 'Force-Directed Graph';\r\n\r\n    const [ getOptions, setOptions ] = useContext( GlobalContext );\r\n\r\n    const { edgeSize, nodeSize, dynamicEdges, dynamicNodes, colorBy, nodeScaleFactor, edgeScaleFactor } =\r\n        getOptions( visID );\r\n\r\n    return (\r\n        <div>\r\n            <CustomMenuItem defaultValue={colorBy} title='Color nodes based on job:' height='2'>\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={colorBy}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), colorBy: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Default node size:' info='Controls the size of the circles in the visualization' height='2'>\r\n                <Slider\r\n                    min={1}\r\n                    max={20}\r\n                    defaultValue={nodeSize}\r\n                    onAfterChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), nodeSize: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Default edge size:' info='Controls the length of the edges' height='2'>\r\n                <Slider\r\n                    max={200}\r\n                    defaultValue={edgeSize}\r\n                    onAfterChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), edgeSize: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem\r\n                title='Make nodes larger based on degree:'\r\n                info='May be overwhelming with few nodes.'\r\n                height='2'\r\n            >\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={dynamicNodes}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), dynamicNodes: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            {dynamicNodes && (\r\n                <CustomMenuItem\r\n                    title='Node scale factor:'\r\n                    info='By how much the radius of nodes with a high degree will be multiplied.'\r\n                    height='2'\r\n                >\r\n                    <Slider\r\n                        min={1}\r\n                        max={10}\r\n                        defaultValue={nodeScaleFactor}\r\n                        onAfterChange={( event ) => {\r\n                            setOptions( visID, { ...getOptions( visID ), nodeScaleFactor: event } );\r\n                        }}\r\n                    />\r\n                </CustomMenuItem>\r\n            )}\r\n            <CustomMenuItem\r\n                title='Make edges larger based on frequency:'\r\n                info='More noticeable with many links.'\r\n                height='2'\r\n            >\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={dynamicEdges}\r\n                    onChange={( event ) => {\r\n                        setOptions( visID, { ...getOptions( visID ), dynamicEdges: event } );\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            {dynamicEdges && (\r\n                <CustomMenuItem\r\n                    title='Edge scale factor:'\r\n                    info='Controls how much the edge size will increase depending on the total amount of links.'\r\n                    height='2'\r\n                >\r\n                    <Slider\r\n                        min={1}\r\n                        max={20}\r\n                        defaultValue={edgeScaleFactor}\r\n                        onAfterChange={( event ) => {\r\n                            setOptions( visID, { ...getOptions( visID ), edgeScaleFactor: event } );\r\n                        }}\r\n                    />\r\n                </CustomMenuItem>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Slider, Switch } from 'antd';\r\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { GlobalContext } from './GlobalContext';\r\n\r\nexport default function FD3DOptions() {\r\n    const visID = '3D Force-Directed Graph';\r\n\r\n    const [getOptions, setOptions] = useContext(GlobalContext);\r\n\r\n    const { edgeSize, nodeSize, dynamicNodes, colorBy, nodeScaleFactor, linkParticles, linkArrows, edgeOpacity } =\r\n        getOptions(visID);\r\n\r\n    return (\r\n        <div>\r\n            <CustomMenuItem defaultValue={colorBy} title='Color nodes based on job:' height='2'>\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={colorBy}\r\n                    onChange={(event) => {\r\n                        setOptions(visID, { ...getOptions(visID), colorBy: event });\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem defaultValue={colorBy} title='Show link particles for selected node:' info='The particles represent the emails sent and flow over the links from the sender to the recipient' height='2'>\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={linkParticles}\r\n                    onChange={(event) => {\r\n                        setOptions(visID, { ...getOptions(visID), linkParticles: event });\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem defaultValue={colorBy} title='Show directional arrows:' info='The arrows point to the recipients' height='2'>\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={linkArrows}\r\n                    onChange={(event) => {\r\n                        setOptions(visID, { ...getOptions(visID), linkArrows: event });\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem\r\n                title='Default edge opacity:'\r\n                info='Changes the opacity of edges. Setting opacity to 0 and selecting a node gives a cool effect.'\r\n                height='2'\r\n            >\r\n                <Slider\r\n                    min={0}\r\n                    max={1}\r\n                    step={0.01}\r\n                    defaultValue={edgeOpacity}\r\n                    onAfterChange={(event) => {\r\n                        setOptions(visID, { ...getOptions(visID), edgeOpacity: event });\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Default node size:' info='Increases the size of the spheres' height='2'>\r\n                <Slider\r\n                    min={1}\r\n                    max={20}\r\n                    defaultValue={nodeSize}\r\n                    onAfterChange={(event) => {\r\n                        setOptions(visID, { ...getOptions(visID), nodeSize: event });\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem title='Default edge size:' info='Controls the length of the edges' height='2'>\r\n                <Slider\r\n                    max={200}\r\n                    defaultValue={edgeSize}\r\n                    onAfterChange={(event) => {\r\n                        setOptions(visID, { ...getOptions(visID), edgeSize: event });\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            <CustomMenuItem\r\n                title='Make nodes larger based on degree:'\r\n                info='May be overwhelming with few nodes.'\r\n                height='2'\r\n            >\r\n                <br />\r\n                <Switch\r\n                    checkedChildren={<CheckOutlined />}\r\n                    unCheckedChildren={<CloseOutlined />}\r\n                    defaultChecked={dynamicNodes}\r\n                    onChange={(event) => {\r\n                        setOptions(visID, { ...getOptions(visID), dynamicNodes: event });\r\n                    }}\r\n                />\r\n            </CustomMenuItem>\r\n            {dynamicNodes && (\r\n                <CustomMenuItem\r\n                    title='Node scale factor:'\r\n                    info='By how much the radius of nodes with a high degree will be multiplied.'\r\n                    height='2'\r\n                >\r\n                    <Slider\r\n                        min={1}\r\n                        max={10}\r\n                        defaultValue={nodeScaleFactor}\r\n                        onAfterChange={(event) => {\r\n                            setOptions(visID, { ...getOptions(visID), nodeScaleFactor: event });\r\n                        }}\r\n                    />\r\n                </CustomMenuItem>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\n/**\r\n * Renders the user manual in the sidebar\r\n */\r\nexport default function UserManual() {\r\n\r\n    return (\r\n        <CustomMenuItem>\r\n            <Paragraph style={{ lineHeight: '120%' }}>Welcome to the user manual! Here you can find some information about this page and how it works.</Paragraph>\r\n            <Title level={3}>General Options</Title>\r\n            <Paragraph style={{ lineHeight: '120%' }}>\r\n                Before you start looking at visualisations, you should adjust the General Options to your liking.\r\n                You can choose primary graph you want to display and optionally also a graph to display beside it.\r\n                You can also choose a timeframe which filters out all data that doesn&apos;t fit in that timeframe.\r\n            </Paragraph>\r\n            <Title level={3}>The viewport</Title>\r\n            <Paragraph style={{ lineHeight: '120%' }}>\r\n                The viewport is the section where the graph is displayed.\r\n                Here you can interact with the graph in different ways, but that is discussed in their specific sections.\r\n                When 2 graphs are selected in the general settings, the viewport is split in half vertically.\r\n                In this situation there are 2 viewports besides eachother, 1 for each visualisation.\r\n                In the top left part of the viewport the name of the current visualisation is displayed.\r\n                In the top right there is an info button, which displays information about the current graph when you hover over it.\r\n                In the bottom right corner you can find a save button, which allows you to save the currently displayed graph as a picture.\r\n                At the bottom of the viewport there is a timeline, but that is discussed in its own section.\r\n            </Paragraph>\r\n            <Title level={3}>Hierarchical Edge Bundling</Title>\r\n            <Paragraph style={{ lineHeight: '120%' }}>\r\n                Edges may be colored differently based on sentiment, sender&apos;s jobtitle, or receiver&apos;s job title.\r\n                Similarly, nodes may be colored based on one of the following options: average, minimum,\r\n                or maximum sentiment or sender&apos;s jobtitle.\r\n                The edge thickness may be increased or decreased by use of the slider, and the edge bundling factor may be modified\r\n                likewise. These options may be found under &apos;Options For Graph&apos; on the sidebar.</Paragraph>\r\n            <Title level={3}>(Disjoint) Force Directed Graph</Title>\r\n            <Paragraph style={{ lineHeight: '120%' }}>\r\n                Nodes may be colored based on job title, and resized by use of a slider, degree, and node scale factor\r\n                (which may also be increased or decreased by slider). Edges may be resized in a similar fasion by using the slider,\r\n                and through frequence or scale factor (may be changed through a slider).\r\n                    These options may be found under &apos;Options For Graph&apos; on the sidebar.</Paragraph>\r\n            <Title level={3}>Timeline</Title>\r\n            <Paragraph style={{ lineHeight: '120%' }}>\r\n                At the bottom of the viewport you can find the timeline. Here you can move through the timeframe you selected in the General Options.\r\n                The timeline is represented with 2 nodes. The first represents the start of the timeline and the other one the end of the timeline.\r\n                You can drag both of them individually over the timeline with your mouse to move through the timeline.\r\n                You can also use the play button to automatically move through the nodes.\r\n                The play button is located at the bottom center of the viewport.\r\n                In the bottom left corner there are 2 locks present, whith which you can control which nodes move when you press the play button.\r\n                You can also use the buttons next to the play button to move a single day (single arrow) or move to the next change (double arrow).\r\n                In the bottom right you can select the speed at which the nodes move when you press the play button.\r\n            </Paragraph>\r\n        </CustomMenuItem>\r\n    );\r\n}","import React from 'react';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { Typography } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nconst { Title, Paragraph, Text } = Typography;\r\nimport { Collapse } from 'antd';\r\n\r\nconst { Panel } = Collapse;\r\n\r\n\r\n/**\r\n * Renders the selected node in the sidebar\r\n */\r\nexport default function SelectedNode( { Email, outDegree, inDegree, Job } ) {\r\n    if ( Email == null ) {\r\n        return (\r\n            <CustomMenuItem>\r\n                <Title level={4} style={{ marginTop: '0%' }}>No Node Selected</Title>\r\n            </CustomMenuItem>\r\n        );\r\n    }\r\n    return (\r\n        <li className='custom-menu-item' style={{ padding: '16px' }}>\r\n            <Collapse defaultActiveKey='selected'>\r\n                <Panel key='selected' header={Email}>\r\n                    <Paragraph style={{ lineHeight: '120%' }}>\r\n                        <Text strong>\r\n                            Emails Sent:\r\n                        </Text>\r\n                        {' ' + outDegree}\r\n                    </Paragraph>\r\n                    <Paragraph style={{ lineHeight: '120%' }}>\r\n                        <Text strong>\r\n                            Emails Received:\r\n                        </Text>{' ' + inDegree}\r\n                    </Paragraph>\r\n                    <Paragraph style={{ lineHeight: '120%' }}>\r\n                        <Text strong>\r\n                            Job Title:\r\n                        </Text>\r\n                        {' ' + Job}\r\n                    </Paragraph>\r\n                </Panel>\r\n            </Collapse>\r\n        </li>\r\n\r\n    );\r\n}\r\nSelectedNode.propTypes = {\r\n    Email: PropTypes.string,\r\n    outDegree: PropTypes.number,\r\n    inDegree: PropTypes.number,\r\n    Job: PropTypes.string\r\n};","import React, { useContext, useState } from 'react';\r\nimport CustomMenuItem from './CustomMenuItem';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport GeneralOptions from './GeneralOptions';\r\nimport HEBOptions from './HEBOptions';\r\nimport DFDOptions from './DFDOptions';\r\nimport FDOptions from './FDOptions';\r\nimport FD3DOptions from './FD3DOptions';\r\nimport { SettingOutlined, SlidersOutlined, FileSearchOutlined, ReadOutlined, InfoCircleOutlined } from '@ant-design/icons';\r\nimport { Menu, Layout, Button, Modal, Tooltip, Spin } from 'antd';\r\nimport { DataContext } from '../../../context/data';\r\nimport './OptionsSidebar.css';\r\nimport UserManual from './UserManual';\r\nimport SelectedNode from './SelectedNode';\r\nimport DataList from '../../../data/list';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Sider } = Layout;\r\n\r\n/**\r\n * Renders the sidebar with the correct sections based on the graphs that are selected.\r\n */\r\nexport default function OptionsSidebar() {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n\r\n    //eslint-disable-next-line\r\n    let [data, setData, fileName, setFileName, loading] = React.useContext(DataContext);\r\n\r\n    const [getOptions] = useContext(GlobalContext);\r\n\r\n    const contextID = 'Global';\r\n\r\n    const { graph1, graph2, columnList, selectedNode, position, emailsSent, emailsReceived } = getOptions(contextID);\r\n\r\n    let [ showDataModal, setDataModal ] = React.useState( false );\r\n\r\n\r\n    // Will render the appropriate option panel depending on the selected graph\r\n    const renderOptions = (graph) => {\r\n\r\n        switch (graph) {\r\n            case 'Hierarchical Edge Bundling':\r\n                return <HEBOptions />;\r\n            case 'Disjoint Force-Directed':\r\n                return <DFDOptions />;\r\n            case 'Force-Directed Graph':\r\n                return <FDOptions />;\r\n            //case 'Arc Diagram':\r\n            //return <CustomMenuItem title='Not yet implemented!' height='1' />;\r\n            case '3D Force-Directed Graph':\r\n                return <FD3DOptions />;\r\n            case 'Manual':\r\n                return <UserManual />;\r\n\r\n            case 'SelectedNode':\r\n                return <SelectedNode Email={selectedNode} inDegree={emailsReceived} outDegree={emailsSent} Job={position} />;\r\n\r\n            default:\r\n                return <CustomMenuItem title='Set a graph type in &#39;General Options&#39;' height='1' />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Sider\r\n            collapsible\r\n            collapsed={collapsed}\r\n            onCollapse={() => {\r\n                setCollapsed(!collapsed);\r\n            }}\r\n            breakpoint='lg'\r\n            width={400}\r\n            className='sidebar'\r\n        >\r\n            <Modal\r\n                title={'Choose a Dataset'}\r\n                visible={showDataModal}\r\n                onCancel={() => setDataModal( false )}\r\n                bodyStyle={{ padding: 0 }}\r\n                destroyOnClose={true}\r\n                footer={[\r\n                    <Tooltip title='Go to the upload page' key='upload'>\r\n                        <Link to='dataUpload'>\r\n                            <Button style={{ marginRight: 'auto', display: 'block', textAlign: 'left' }}>\r\n                                Upload\r\n                            </Button>\r\n                        </Link>\r\n                    </Tooltip>\r\n                ]}\r\n            >\r\n                <DataList onSwitch={() => setDataModal( false )}/>\r\n            </Modal>\r\n            <Spin spinning={loading}>\r\n                <Menu\r\n                    mode='inline'\r\n                    defaultOpenKeys={['sub1', 'sub5']}\r\n                    style={{ height: '100%', overflowY: 'auto', overflowX: 'hidden' }}\r\n                    selectable={0}\r\n                >\r\n                    {/* This shows the current file and a button that will take you to the 'upload file' window */}\r\n                    <Menu.Item\r\n                        icon={<FileSearchOutlined />}\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-between',\r\n                            alignItems: 'center',\r\n                            marginBottom: '4px'\r\n                        }}\r\n                    >\r\n                        <Tooltip title='Select a dataset'>\r\n                            <Button type={!fileName ? 'primary' : null } onClick={() => setDataModal( true )}>{fileName || 'Choose Dataset'}</Button>\r\n                        </Tooltip>\r\n                    </Menu.Item>\r\n                    {/* These are general options that should be applicable to any graph */}\r\n                    <SubMenu key='sub1' icon={<SettingOutlined />} title='General Options' className='color-5'>\r\n                        <GeneralOptions colList={columnList} />\r\n                    </SubMenu>\r\n\r\n                    {/* These are the options specifically for Graph1 */}\r\n                    <SubMenu key='sub2' icon={<SlidersOutlined />} title='Options For Graph #1'>\r\n                        {renderOptions(graph1)}\r\n                    </SubMenu>\r\n\r\n                    {/* Disabled by default, active when two graphs are shown simultaneously */}\r\n                    {graph2 != 'None' && (\r\n                        <SubMenu key='sub3' icon={<SlidersOutlined />} title='Options For Graph #2'>\r\n                            {renderOptions(graph2)}\r\n                        </SubMenu>\r\n                    )}\r\n\r\n                    {/* Might change to button (Menu.Item) that opens a Modal */}\r\n                    <SubMenu key='sub4' icon={<ReadOutlined />} title='User Manual'>\r\n                        {renderOptions('Manual')}\r\n                    </SubMenu>\r\n\r\n                    {/*This is where the selected node is displayed */}\r\n                    <SubMenu key='sub5' icon={<InfoCircleOutlined />} title='Selected Node'>\r\n                        {renderOptions('SelectedNode')}\r\n\r\n                    </SubMenu>\r\n                </Menu>\r\n            </Spin>\r\n        </Sider>\r\n    );\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport * as d3 from 'd3';\r\nimport './HEBVisualization.css';\r\nimport moment from 'moment';\r\nimport { DataContext } from '../../../context/data';\r\nimport { message } from 'antd';\r\n\r\nconst VIS_ID = 'Hierarchical Edge Bundling';\r\nconst CONTEXT_ID = 'Global';\r\n\r\n/**\r\n * Threshold of the maximum amount of e-mails allowed before fastRender is enabled.\r\n */\r\nconst FAST_RENDER_THRESHOLD = 15000;\r\n\r\nexport default function HEBVisualization() {\r\n    //Place global context into an array\r\n    const [getOptions, setOptions] = useContext(GlobalContext);\r\n\r\n    //Fetch the global options from the context\r\n    const globalOptions = getOptions(CONTEXT_ID);\r\n\r\n    //Gets the specific graph options from the context\r\n    const options = getOptions(VIS_ID);\r\n\r\n    var showLegend = false;\r\n\r\n    let [visualisation, setVisualisation] = useState({\r\n        /**\r\n         * @type {( root ) => void}\r\n         */\r\n        update: null\r\n    });\r\n\r\n    //Gets the dataset from the DataContext and stores it in the dataset variable\r\n    let [dataset] = React.useContext(DataContext);\r\n\r\n    let [formattedData, setFormattedData] = useState(\r\n        /**\r\n         * Formatted data in hierarchical form to be used by the HEB\r\n         * @type {d3.HierarchyNode<{\r\n         *   name: string;\r\n         *   children: any[];\r\n         * }>}\r\n         */\r\n        null\r\n    );\r\n\r\n    //Reference to the visualisation component which d3 can use\r\n    const visBox = useRef();\r\n\r\n    /**\r\n     * Initializes the d3 visualization and provides an update function for updating it.\r\n     */\r\n    useEffect(() => {\r\n        //Set width and radius of visualization\r\n        const width = 850;\r\n        const radius = width / 2;\r\n\r\n        //d3.cluster is a utility function that will give each node an x and y value when tree is called.\r\n        //This is then used to calculate their positions on the circle.\r\n        //https://github.com/d3/d3-hierarchy#cluster\r\n        const tree = d3.cluster().size([2 * Math.PI, radius - 100]);\r\n\r\n        //Create an empty hierarchy structure for when the dataset is not available yet.\r\n        const root = d3.hierarchy({ name: '', children: [] });\r\n        root.incoming = [];\r\n        root.outgoing = [];\r\n\r\n        // Create an svg and add it to the component. should scale itself to available space.\r\n        const svg = d3\r\n            .select(visBox.current)\r\n            .append('svg')\r\n            .attr('viewBox', [-width / 2, -width / 2, width, width])\r\n            .style('height', '100%')\r\n            .style('width', '100%');\r\n\r\n        //Create the nodes container\r\n        const node = svg.append('g').classed('node', true);\r\n\r\n        //Create the links container\r\n        const link = svg.append('g').classed('link', true);\r\n\r\n        var legend = d3\r\n            .select(visBox.current)\r\n            .append('div')\r\n            .style('bottom', '20px')\r\n            .style('left', '20px')\r\n            .style('position', 'absolute')\r\n            .style('background-color', 'white')\r\n            .style('border-radius', '10px')\r\n            .style('padding', '10px 15px 0 15px')\r\n            .style('width', '200px')\r\n            .style('overflow', 'hidden')\r\n            .style('max-height', '53px')\r\n            .style('transition', 'all 250ms ease-in-out 0s');\r\n\r\n        var legendHeader = legend\r\n            .append('div')\r\n            .style('display', 'flex')\r\n            .style('justify-content', 'space-between')\r\n            .style('align-items', 'center')\r\n            .style('margin-bottom', '10px')\r\n            .html(\"<h2 style='margin: 0;'>Legend</h2>\");\r\n\r\n        var legendContent = legend.append('div');\r\n\r\n        var legendButton = legendHeader\r\n            .append('a')\r\n            .style('background', 'none')\r\n            // .style( 'color', 'blue' )\r\n            .style('border', 'none')\r\n            .style('text-decoration', 'none')\r\n            .style('font-size', '1rem')\r\n            .html('Show')\r\n            .on('click', () => {\r\n                if (showLegend) {\r\n                    legendButton.html('Show');\r\n                    legend.style('max-height', '53px');\r\n                } else {\r\n                    legendButton.html('Hide');\r\n                    legend.style('max-height', legendContent.node().offsetHeight + 67 + 'px');\r\n                }\r\n                showLegend = !showLegend;\r\n            })\r\n            .on('mouseover', () => {\r\n                legendButton.style('text-decoration', 'underline');\r\n            })\r\n            .on('mouseout', () => {\r\n                legendButton.style('text-decoration', 'none');\r\n            });\r\n\r\n        //Mapping of jobs to colors\r\n        let { jobColors } = getOptions(CONTEXT_ID);\r\n\r\n        //Stores all path and node elements that are rendered by their id, used in the onHover calls\r\n        let pathElements = [];\r\n        let nodeElements = {};\r\n        let highlightedEmails = [];\r\n\r\n        let previousHighlightedNodes = [];\r\n\r\n        let oldOptions = {};\r\n\r\n        /**\r\n         * Updates all parts of the visualization that are dependent on either the dataset or the user options.\r\n         *\r\n         * @param {*} root                  Filtered and formatterd dataset\r\n         * @param {*} options               User options\r\n         * @param {Function} getOptions     Get options function\r\n         * @param {Function} setOptions\r\n         */\r\n        let update = (root, options, getOptions, setOptions) => {\r\n            //Checks for all things that have changed in options. Used for rendering optimization\r\n            let changed = {\r\n                nodeColor: false,\r\n                edgeColor: false,\r\n                convertEmail: false,\r\n                edgeThickness: false,\r\n                bundlingFactor: false\r\n            };\r\n\r\n            if (\r\n                options.colorNodeBy != oldOptions.colorNodeBy ||\r\n                options.colorRange != oldOptions.colorRange ||\r\n                options.colorFactor != oldOptions.colorFactor\r\n            )\r\n                changed.nodeColor = true;\r\n\r\n            if (options.convertEmail != oldOptions.convertEmail) changed.convertEmail = true;\r\n\r\n            if (\r\n                options.colorEdgeBy != oldOptions.colorEdgeBy ||\r\n                options.colorRange != oldOptions.colorRange ||\r\n                options.colorFactor != oldOptions.colorFactor\r\n            )\r\n                changed.edgeColor = true;\r\n\r\n            if (options.edgeThickness != oldOptions.edgeThickness) changed.edgeThickness = true;\r\n\r\n            if (options.bundlingFactor != oldOptions.bundlingFactor) changed.bundlingFactor = true;\r\n\r\n            oldOptions = options;\r\n\r\n            /**\r\n             * Called when the user hovers over a specific e-mailaddress\r\n             *\r\n             * @param {*} event Mouse event details\r\n             * @param {*} d     E-mail address data that was hovered over\r\n             */\r\n            function onMouseOver(event, d) {\r\n                setOptions(CONTEXT_ID, { ...getOptions(CONTEXT_ID), hoveredNode: d.data.name });\r\n            }\r\n\r\n            /**\r\n             * Called when the user clicks on a specific e-mailaddress\r\n             *\r\n             * @param {*} event Mouse event details\r\n             * @param {*} d     E-mail address data that was clicked\r\n             */\r\n            function onMouseClick(event, d) {\r\n                let { selectedNode } = getOptions(CONTEXT_ID);\r\n                if (selectedNode == d.data.name)\r\n                    setOptions(CONTEXT_ID, { ...getOptions(CONTEXT_ID), selectedNode: null });\r\n                else\r\n                    setOptions(CONTEXT_ID, {\r\n                        ...getOptions(CONTEXT_ID),\r\n                        selectedNode: d.data.name,\r\n                        emailsSent: d.outgoing?.degree,\r\n                        emailsReceived: d.incoming?.degree,\r\n                        position: d.data.jobtitle\r\n                    });\r\n            }\r\n\r\n            /**\r\n             * Called when user stops hovering over the specific e-mailadress\r\n             * @param {*} event Mouse event details\r\n             * @param {*} d     E-mail address data that was hovered over\r\n             */\r\n            function onMouseOut(event, d) {\r\n                let { hoveredNode } = getOptions(CONTEXT_ID);\r\n\r\n                if (hoveredNode != d.data.name) return;\r\n\r\n                setOptions(CONTEXT_ID, { ...getOptions(CONTEXT_ID), hoveredNode: null });\r\n            }\r\n\r\n            //Calculates an x and y position for each of the nodes in the circle\r\n            root = tree(root);\r\n\r\n            //Update bundling factor for the edges\r\n            let line = d3\r\n                .lineRadial()\r\n                .curve(d3.curveBundle.beta(options.bundlingFactor))\r\n                .radius((d) => d.y)\r\n                .angle((d) => d.x);\r\n\r\n            /**\r\n             * Returns the sentiment color based on the selected color scheme (options.colorRange).\r\n             *\r\n             * @param {*} sentiment Sentiment value of a particular e-mail message\r\n             * @returns String of RGB value (#RRGGBB) or default 'black'\r\n             */\r\n            let sentimentColors = (sentiment) => {\r\n                // Using sigmoid function for better distribution because most values are around 0.5\r\n                sentiment = 1 / (1 + ((sentiment + 1) / (1 - sentiment)) ** -options.colorFactor);\r\n                switch (options.colorRange) {\r\n                    case 'Viridis':\r\n                        return d3.interpolateViridis(sentiment);\r\n                    case 'Turbo':\r\n                        return d3.interpolateTurbo(sentiment);\r\n                    case 'Inferno':\r\n                        return d3.interpolateInferno(sentiment);\r\n                    case 'Plasma':\r\n                        return d3.interpolatePlasma(sentiment);\r\n                    case 'Warm':\r\n                        return d3.interpolateWarm(sentiment);\r\n                    case 'Cool':\r\n                        return d3.interpolateCool(sentiment);\r\n\r\n                    default:\r\n                        return 'black';\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Returns the color of the node based on the user settings\r\n             *\r\n             * @param {*} node Node datapoint\r\n             * @returns String of RGB value (#RRGGBB) or default 'black'\r\n             */\r\n            let colorNode = (node) => {\r\n                switch (options.colorNodeBy) {\r\n                    case 'Average Sentiment': {\r\n                        let sentiment = 0;\r\n                        var divider = node.data.children.mails?.length;\r\n\r\n                        node.data.children.mails?.forEach((mail) => {\r\n                            sentiment += mail.sentiment;\r\n                        });\r\n\r\n                        sentiment /= divider;\r\n\r\n                        return sentimentColors(sentiment);\r\n                    }\r\n                    case 'Minimum Sentiment': {\r\n                        let sentiment = 2;\r\n\r\n                        node.data.children.mails?.forEach((mail) => {\r\n                            if (mail.sentiment < sentiment) {\r\n                                sentiment = mail.sentiment;\r\n                            }\r\n                        });\r\n\r\n                        if (sentiment == 2) return 'black';\r\n\r\n                        return sentimentColors(sentiment);\r\n                    }\r\n                    case 'Maximum Sentiment': {\r\n                        let sentiment = -2;\r\n\r\n                        node.data.children.mails?.forEach((mail) => {\r\n                            if (mail.sentiment > sentiment) {\r\n                                sentiment = mail.sentiment;\r\n                            }\r\n                        });\r\n\r\n                        if (sentiment == -2) return 'black';\r\n\r\n                        return sentimentColors(sentiment);\r\n                    }\r\n                    case \"Sender's Jobtitle\":\r\n                        return jobColors(node.data.jobtitle);\r\n                    default:\r\n                        return 'black';\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Returns the edge color based on the user's settings\r\n             *\r\n             * @param {*} edge Array with 2 elements: outgoing node and incoming node\r\n             * @returns Returns coloring or #444 as default\r\n             */\r\n            let colorEdge = (edge) => {\r\n                switch (options.colorEdgeBy) {\r\n                    case 'Sentiment':\r\n                        var sentiment = 0;\r\n                        var divider = 0;\r\n                        \r\n                        edge[0].data.children.mails.forEach((mail) => {\r\n                            if ( edge[ 1 ].data.name == mail.toEmail ) {\r\n                                sentiment += mail.sentiment;\r\n                                divider++;\r\n                            }\r\n                        });\r\n\r\n                        sentiment /= divider;\r\n\r\n                        return sentimentColors(sentiment);\r\n                    case \"Sender's Jobtitle\":\r\n                        return jobColors(edge[0].data.jobtitle);\r\n                    case \"Receiver's Jobtitle\":\r\n                        return jobColors(edge[1].data.jobtitle);\r\n                    default:\r\n                        return '#444';\r\n                }\r\n            };\r\n\r\n            let nodes = node.selectAll('g').data(root.leaves(), (d) => d.data.name);\r\n\r\n            nodes\r\n                .enter()\r\n                .append('g')\r\n\r\n                //Use the x and y position calculated by the tree function to place it onto the circle\r\n                .attr('transform', (d) => `rotate(${(d.x * 180) / Math.PI - 90}) translate(${d.y},0)`)\r\n                .append('text')\r\n                .attr('dy', '0.31em')\r\n\r\n                //Rotate the text based on the circle half it is in\r\n                .attr('x', (d) => (d.x < Math.PI ? 6 : -6))\r\n                .attr('text-anchor', (d) => (d.x < Math.PI ? 'start' : 'end'))\r\n                .attr('transform', (d) => (d.x >= Math.PI ? 'rotate(180)' : null))\r\n\r\n                //Format text\r\n                .text((d) => {\r\n                    if (options.convertEmail) return d.data.name.replace('.', ' ').substr(0, d.data.name.indexOf('@'));\r\n\r\n                    return d.data.name;\r\n                })\r\n                .attr('fill', (d) => colorNode(d))\r\n                .each(function (d) {\r\n                    nodeElements[d.data.name] = this;\r\n                })\r\n                .call((text) => text.append('title'));\r\n\r\n            nodes\r\n                .exit()\r\n                .each(function (d) {\r\n                    delete nodeElements[d.data.name];\r\n                })\r\n                .remove();\r\n\r\n            let legendContentText = '';\r\n            let jobs = new Map();\r\n\r\n            node.selectAll('g')\r\n                .on('mouseover', onMouseOver)\r\n                .on('mouseout', onMouseOut)\r\n                .on('click', onMouseClick)\r\n                .call((elem) => {\r\n                    elem.select('title').text(\r\n                        (d) =>\r\n                            `${d.data.name} (${d.data.jobtitle})` +\r\n                            `\\n${d.outgoing?.degree || 0} outgoing` +\r\n                            `\\n${d.incoming?.degree || 0} incoming`\r\n                    );\r\n\r\n                    let text = elem.select('text');\r\n\r\n                    if (changed.convertEmail)\r\n                        text.text((d) => {\r\n                            if (options.convertEmail)\r\n                                return d.data.name.replace('.', ' ').substr(0, d.data.name.indexOf('@'));\r\n\r\n                            return d.data.name;\r\n                        });\r\n                    if (changed.nodeColor || options.colorNodeBy?.includes('Sentiment'))\r\n                        text.attr('fill', (d) => {\r\n                            return colorNode(d);\r\n                        });\r\n                })\r\n                .each((d) => {\r\n                    //console.log(d);\r\n                    let jobtitle = d.data.jobtitle;\r\n                    if ((options.colorNodeBy.includes('Jobtitle') || options.colorEdgeBy.includes('Jobtitle'))) {\r\n                        if (jobs.has(jobtitle)) {\r\n                            jobs.set(jobtitle, jobs.get(jobtitle) + 1);\r\n                        } else {\r\n                            jobs.set(jobtitle,1);\r\n                        }\r\n                    }\r\n                });\r\n\r\n            //Enable or disable fast rendering when there are over a certain number of edges on screen.\r\n            //Fast render tells the browser to not render as much detail (edge curves are less smooth)\r\n            let links = root.leaves().flatMap((leaf) => leaf.outgoing);\r\n            let enableFastRender = links.length > FAST_RENDER_THRESHOLD;\r\n\r\n            if (!enableFastRender && svg.classed('fastRender')) message.info('Fast rendering mode disabled.', 5);\r\n            else if (enableFastRender && !svg.classed('fastRender')) message.info('Fast rendering mode enabled.', 5);\r\n\r\n            svg.classed('fastRender', enableFastRender).classed('capitalize', options.convertEmail);\r\n\r\n            let selection = link.selectAll('path').data(links, (d) => d.id);\r\n\r\n            //Add a new path element for all new emails in the filtered dataset\r\n            selection\r\n                .enter()\r\n                .append('path')\r\n                .attr('d', ([i, o]) => line(i.path(o)))\r\n                .attr('stroke', (d) => colorEdge(d))\r\n                .style('stroke-width', options.edgeThickness == 1 ? null : options.edgeThickness + 'px')\r\n                .each(function (d) {\r\n                    pathElements[d.id] = this;\r\n                });\r\n            //Remove all path elements for everything outside filtered dataset\r\n            selection\r\n                .exit()\r\n                .each(function (d) {\r\n                    delete pathElements[d.id];\r\n                })\r\n                .remove();\r\n\r\n            //Apply all styles, classes and attributes to each path that is rendered\r\n            let paths = link.selectAll('path');\r\n\r\n            if (changed.edgeThickness)\r\n                paths.style('stroke-width', options.edgeThickness == 1 ? null : options.edgeThickness + 'px');\r\n\r\n            if (changed.edgeColor) paths.attr('stroke', (d) => colorEdge(d));\r\n\r\n            if (changed.bundlingFactor) paths.attr('d', ([i, o]) => line(i.path(o)));\r\n\r\n            //Highlighting & unhighlighting\r\n\r\n            let { selectedNode, hoveredNode, emailsSent, emailsReceived } = getOptions(CONTEXT_ID);\r\n\r\n            let toUnhighlight = highlightedEmails.filter(\r\n                (element) => element != selectedNode && element != hoveredNode\r\n            );\r\n\r\n            highlightedEmails = [ selectedNode, hoveredNode];\r\n\r\n            //Update the degrees in the sidebar if necessary\r\n            let selected = root.leaves().find( ( d ) => d.data.name == selectedNode );\r\n\r\n            if ( selected && ( selected.outgoing.degree != emailsSent || selected.incoming.degree != emailsReceived ) )\r\n                setOptions( CONTEXT_ID, {\r\n                    ...getOptions( CONTEXT_ID ),\r\n                    selectedNode: selected.data.name,\r\n                    emailsSent: selected.outgoing.degree,\r\n                    emailsReceived: selected.incoming.degree\r\n                } );\r\n\r\n            /**\r\n             * Called for all elements that will be unhighlighted\r\n             *\r\n             * @param {*} d            Node data\r\n             * @param {*} element      HTML element\r\n             */\r\n            function unhighlight(d, element) {\r\n                d3.select(element).attr('font-weight', null);\r\n                //Un-highlight the paths\r\n                d3.selectAll(d.incoming.map((d) => pathElements[d.id])).classed('link-target', false);\r\n                d3.selectAll(d.outgoing.map((d) => pathElements[d.id])).classed('link-source', false);\r\n                //Un-highlight the E-mail addresses\r\n                d3.selectAll(d.incoming.map(([d]) => nodeElements[d.data.name])).classed('node-source', false);\r\n                d3.selectAll(d.outgoing.map(([, d]) => nodeElements[d.data.name])).classed('node-target', false);\r\n            }\r\n\r\n            toUnhighlight.forEach((email) => {\r\n                let node = root.leaves().find((d) => d.data.name == email);\r\n                if (node != null) unhighlight(node, nodeElements[email]);\r\n            });\r\n\r\n            let highlightedNodes = [];\r\n\r\n            /**\r\n             * Called when the user hovers over a specific e-mailaddress\r\n             *\r\n             * @param {*} d             Node data\r\n             * @param {*} element       HTML element\r\n             */\r\n            function highlight(d, element) {\r\n                //console.log( d, element );\r\n                d3.select(element).attr('font-weight', 'bolder');\r\n\r\n                //Highlight the paths by applying a class to them\r\n                d3.selectAll(d.incoming.map((d) => pathElements[d.id]))\r\n                    .classed('link-target', true)\r\n                    .raise();\r\n                d3.selectAll(d.outgoing.map((d) => pathElements[d.id]))\r\n                    .classed('link-source', true)\r\n                    .raise();\r\n\r\n                //Highlight the e-mail address labels by applying a class to them\r\n                d3.selectAll(\r\n                    d.incoming.map(([d]) => {\r\n                        if (!highlightedNodes.includes(nodeElements[d.data.name]))\r\n                            highlightedNodes.push(nodeElements[d.data.name]);\r\n                        return nodeElements[d.data.name];\r\n                    })\r\n                ).classed('node-source', true);\r\n                d3.selectAll(\r\n                    d.outgoing.map(([, d]) => {\r\n                        if (!highlightedNodes.includes(nodeElements[d.data.name]))\r\n                            highlightedNodes.push(nodeElements[d.data.name]);\r\n                        return nodeElements[d.data.name];\r\n                    })\r\n                ).classed('node-target', true);\r\n            }\r\n\r\n            highlightedEmails.forEach((email) => {\r\n                let node = root.leaves().find((d) => d.data.name == email);\r\n                if (node != null) highlight(node, nodeElements[email]);\r\n            });\r\n\r\n            //Unhighlight all previous nodes that might still be highlighted after the removal of an edge\r\n            d3.selectAll(previousHighlightedNodes.filter((node) => !highlightedNodes.includes(node)))\r\n                .classed('node-source', false)\r\n                .classed('node-target', false);\r\n\r\n            previousHighlightedNodes = highlightedNodes;\r\n\r\n            let jobsSorted = new Map([...jobs.entries()].sort());\r\n\r\n            for (let [key, value] of jobsSorted) {\r\n                legendContentText += `<p><span style='color: ${jobColors( key )};'>&#11044</span> ${key}<span style=\"float: right\">${value}</span></p>`;\r\n            }\r\n            legendContent.html(legendContentText);\r\n\r\n            if (options.colorNodeBy.includes('Sentiment') || options.colorEdgeBy.includes('Sentiment')) {\r\n                legendContent.append('p')\r\n                    .style('font-weight', 'bold')\r\n                    .style('text-align', 'center')\r\n                    .style('margin-bottom', '4px')\r\n                    .html('Sentiment Value');\r\n                legendContent.append('img')\r\n                    .attr('src', `/res/${options.colorRange}.png`)\r\n                    .attr('height', '20px')\r\n                    .attr('width', '100%')\r\n                    .style('border-radius', '5px');\r\n                var colorRangeLabel = legendContent.append('p')\r\n                    .style('display', 'flex')\r\n                    .style('justify-content', 'space-between');\r\n                colorRangeLabel\r\n                    .append('span').html('Angry');\r\n                colorRangeLabel\r\n                    .append('span').html('Happy');\r\n            }\r\n\r\n            if (showLegend) {\r\n                legend.style('max-height', legendContent.node().offsetHeight + 67 + 'px');\r\n            }\r\n        };\r\n\r\n        //Update the graph with the empty hierarchical data\r\n        update(root, options, getOptions, setOptions);\r\n\r\n        setVisualisation({ update: update });\r\n\r\n        // When the component unmounts, we will remove the SVG and resize listener\r\n        return () => {\r\n            d3.select(visBox.current).selectAll('*').remove();\r\n        };\r\n    }, []);\r\n\r\n    /**\r\n     * Filter and prepare the dataset based on the date range in the timeline.\r\n     */\r\n    useEffect(() => {\r\n        if (!dataset) return;\r\n\r\n        // Will be populated with the dataset converted to hierarchical structure\r\n        let root = { name: 'data', children: [] };\r\n\r\n        //Create email and job map to easily keep track of all e-mail addresses uniquely and all jobtypes uniquely\r\n        const emailMap = new Map();\r\n        const jobMap = new Map();\r\n\r\n        //Get dates from the ones specified by the timeline (use getTime to convert to numbers for efficiency)\r\n        const startDate = new Date(\r\n            moment(globalOptions.timeline).subtract(globalOptions.previousDays, 'days')\r\n        ).getTime();\r\n        const endDate = new Date(globalOptions.timeline).getTime();\r\n\r\n        //Loop over the dataset and populate the maps above with all e-mail addresses and jobs (these are not filtered on date).\r\n        //When the date of an e-mail falls within the range, add it to the e-mail map.\r\n        dataset.forEach((data, index) => {\r\n            let { fromJobtitle, fromEmail, toEmail, toJobtitle, date, sentiment } = data;\r\n\r\n            if (!jobMap.has(fromJobtitle)) jobMap.set(fromJobtitle, { children: [] });\r\n\r\n            if (!jobMap.has(toJobtitle)) jobMap.set(toJobtitle, { children: [] });\r\n\r\n            if (!emailMap.get(fromEmail)) emailMap.set(fromEmail, { children: [], jobtitle: fromJobtitle });\r\n\r\n            if (!emailMap.get(toEmail)) emailMap.set(toEmail, { children: [], jobtitle: toJobtitle });\r\n\r\n            //Convert to number for efficiency\r\n            let time = date.getTime();\r\n\r\n            if (time < startDate || time > endDate) return;\r\n            emailMap.get(fromEmail).children.push({ toEmail: toEmail, date: date, sentiment: sentiment, id: index }); \r\n        });\r\n\r\n        //Add all email adresses to the jobs to create a hierarchical structure\r\n        emailMap.forEach((entry, key) => {\r\n            jobMap\r\n                .get(entry.jobtitle)\r\n                .children.push({ name: key, jobtitle: entry.jobtitle, children: { mails: entry.children } });\r\n        });\r\n\r\n        //Populate the root object with the hierarchical job data\r\n        //The root object then contains the structure wanted by d3.hierarchy\r\n        jobMap.forEach((entry, key) => {\r\n            root.children.push({ name: key, children: entry.children });\r\n        });\r\n\r\n        const duplicatesMap = new Map();\r\n\r\n        //Populate each e-mail address with it's incoming and outgoing edges (e-mails).\r\n        function bilink(root) {\r\n            const map = new Map(root.leaves().map((d) => [d.data.name, d]));\r\n\r\n            //Create all outgoing edges for each e-mail address\r\n            for (const d of root.leaves()) {\r\n                let mails = d.data?.children?.mails;\r\n\r\n                if (options.removeDuplicates)\r\n                    mails = mails?.filter( ( i ) => {\r\n                        let exists = duplicatesMap.has( d.data.name + '-' + i.toEmail );\r\n                        if ( !exists )\r\n                            duplicatesMap.set( d.data.name + '-' + i.toEmail, 1 );\r\n                        else\r\n                            duplicatesMap.set( d.data.name + '-' + i.toEmail, duplicatesMap.get( d.data.name + '-' + i.toEmail ) + 1 );\r\n                        return !exists;\r\n                    } );\r\n\r\n                d.incoming = [];\r\n                d.outgoing = mails?.map((i) => {\r\n                    let array = [d, map.get(i.toEmail)];\r\n\r\n                    array.id = i.id;\r\n\r\n                    return array;\r\n                });\r\n\r\n                if (!d.outgoing) d.outgoing = [];\r\n\r\n                d.outgoing.degree = d.data?.children?.mails?.length || 0;\r\n            }\r\n            //Create all incoming edges for the email addresses based on outgoing edges\r\n            for (const d of root.leaves()) {\r\n                for (const o of d.outgoing) {\r\n                    o[1].incoming.push(o);\r\n\r\n                    if ( options.removeDuplicates ) {\r\n                        if ( !o[ 1 ].incoming.degree )\r\n                            o[ 1 ].incoming.degree = 0;\r\n\r\n                        o[ 1 ].incoming.degree += duplicatesMap.get( o[ 0 ].data.name + '-' + o[ 1 ].data.name );\r\n                    } else {\r\n                        o[1].incoming.degree = o[1].incoming.length;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return root;\r\n        }\r\n\r\n        let data = bilink(\r\n            d3\r\n                .hierarchy(root)\r\n                .sort((a, b) => d3.ascending(a.height, b.height) || d3.ascending(a.data.name, b.data.name))\r\n        );\r\n\r\n        setFormattedData(data);\r\n    }, [dataset, globalOptions.timeline, globalOptions.previousDays, options]);\r\n\r\n    /**\r\n     * Apply to the data to the visualisation when either the visualisation or the data changes.\r\n     */\r\n    useEffect(() => {\r\n        // Can't do anything without data or update function\r\n        if (!formattedData || !visualisation) return;\r\n\r\n        //Trigger a visualisation update that lets d3 rerender all data\r\n        visualisation.update(formattedData, options, getOptions, setOptions);\r\n    }, [formattedData, globalOptions, visualisation]);\r\n\r\n    //console.log( 'HEB rerender' );\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ margin: '10px 20px' }}>{VIS_ID}</h1>\r\n            <div ref={visBox} style={{ position: 'absolute', top: 50, width: '100%', height: 'calc(100% - 50px)' }} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport moment from 'moment';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport * as d3 from 'd3';\r\nimport { DataContext } from '../../../context/data';\r\n\r\n\r\nconst VIS_ID = 'Disjoint Force-Directed';\r\nconst CONTEXT_ID = 'Global';\r\n\r\nexport default function DFDVisualization() {\r\n\r\n    // #region ------------------ SETUP -------------------\r\n\r\n    const [getOptions, setOptions] = useContext(GlobalContext);\r\n\r\n    const globalOptions = getOptions(CONTEXT_ID);\r\n\r\n    let [visualisation, setVisualisation] = useState({\r\n        /**\r\n         * @type {( nodes, links, maxDegree, options ) => void}\r\n         */\r\n        update: null\r\n    });\r\n\r\n    // Variables used for Legend\r\n    var showLegend = false;\r\n\r\n    let [dataset] = React.useContext(DataContext);\r\n\r\n    let [formattedData, setFormattedData] = useState(\r\n        /**\r\n         * Formatted dataset that can be used by the force-directed graph\r\n         * @type {{\r\n         *     nodes: Map<string,{ id: string, job: string }>,\r\n         *     links: { source: string, target: string, date: moment.Moment }[]\r\n         * }}\r\n         */\r\n        null\r\n    );\r\n\r\n    let [filteredData, setFilteredData] = useState(\r\n        /**\r\n         * Filtered dataset within a specific date range\r\n         * @type {{\r\n         *     nodes: { id: string, job: string }[],\r\n         *     links: { source: string, target: string, date: moment.Moment }[],\r\n         *     maxDegree: number,\r\n         * }}\r\n         */\r\n        null\r\n    );\r\n\r\n    const options = getOptions(VIS_ID);\r\n\r\n    // Reference to the visualisation element\r\n    const visBox = useRef();\r\n\r\n    var dragging = false;\r\n\r\n    // #endregion\r\n\r\n    // #region ----------------- D3 SETUP -----------------\r\n\r\n    // Set-up the SVG drawing\r\n    useEffect(() => {\r\n\r\n        // Initialize all SVG elements\r\n        let svg = d3\r\n            .select(visBox.current)\r\n            .append('svg')\r\n            .style('height', '100%')\r\n            .style('width', '100%');\r\n\r\n        let link = svg\r\n            .append('g')\r\n            .attr('stroke', '#999')\r\n            .attr('stroke-opacity', 0.6);\r\n\r\n        let node = svg\r\n            .append('g')\r\n            .attr('stroke', '#fff')\r\n            .attr('stroke-width', 1.5);\r\n\r\n        var zoom = d3.zoom().on('zoom', function (event) {\r\n            node.attr('transform', event.transform);\r\n            link.attr('transform', event.transform);\r\n        });\r\n\r\n        svg.call(zoom);\r\n\r\n        d3.select(visBox.current)\r\n            .append('button')\r\n            .html('Reset Zoom')\r\n            .style('position', 'absolute')\r\n            .style('bottom', '20px')\r\n            .style('left', '0')\r\n            .style('right', '0')\r\n            .style('margin', 'auto')\r\n            .classed('ant-btn ant-btn-primary', true)\r\n            .on('click', () => {\r\n                svg\r\n                    .transition()\r\n                    .duration(600)\r\n                    .call(zoom.transform, d3.zoomIdentity);\r\n            });\r\n        // infobox for onclick\r\n        // var infobox = d3.select( visBox.current )\r\n        //     .append( 'div' )\r\n        //     .style( 'top', '5px' )\r\n        //     .style( 'left', '20px' )\r\n        //     .style( 'opacity', 0 )\r\n        //     .style( 'position', 'absolute' )\r\n        //     .style( 'background-color', 'white' )\r\n        //     .style( 'border-radius', '10px' )\r\n        //     .style( 'z-index', '100' )\r\n        //     .style( 'padding', '10px 15px' )\r\n        //     .style( 'cursor', 'move' );\r\n\r\n        var legend = d3.select(visBox.current)\r\n            .append('div')\r\n            .style('bottom', '20px')\r\n            .style('left', '20px')\r\n            .style('position', 'absolute')\r\n            .style('background-color', 'white')\r\n            .style('border-radius', '10px')\r\n            .style('padding', '10px 15px 0 15px')\r\n            .style('width', '200px')\r\n            .style('overflow', 'hidden')\r\n            .style('max-height', '53px')\r\n            .style('transition', 'all 250ms ease-in-out 0s');\r\n\r\n        var legendHeader = legend\r\n            .append('div')\r\n            .style('display', 'flex')\r\n            .style('justify-content', 'space-between')\r\n            .style('align-items', 'center')\r\n            .style('margin-bottom', '10px')\r\n            .html(\"<h2 style='margin: 0;'>Legend</h2>\");\r\n\r\n        var legendContent = legend.append('div');\r\n\r\n        var legendButton = legendHeader\r\n            .append('a')\r\n            .style('background', 'none')\r\n            // .style( 'color', 'blue' )\r\n            .style('border', 'none')\r\n            .style('text-decoration', 'none')\r\n            .style('font-size', '1rem')\r\n            .html('Show')\r\n            .on('click', () => {\r\n                if (showLegend) {\r\n                    legendButton.html('Show');\r\n                    legend.style('max-height', '53px');\r\n                } else {\r\n                    legendButton.html('Hide');\r\n                    legend.style('max-height', (legendContent.node().offsetHeight + 67) + 'px');\r\n                }\r\n                showLegend = !showLegend;\r\n            })\r\n            .on('mouseover', () => {\r\n                legendButton.style('text-decoration', 'underline');\r\n            })\r\n            .on('mouseout', () => {\r\n                legendButton.style('text-decoration', 'none');\r\n            });\r\n\r\n\r\n        // Initialize forces & simulation\r\n        let manyBodyForce = d3.forceManyBody();\r\n        let linkForce = d3.forceLink([]).id((d) => d.id);\r\n\r\n        let simulation = d3\r\n            .forceSimulation([])\r\n            .force('x', d3.forceX())\r\n            .force('y', d3.forceY())\r\n            .force('link', linkForce)\r\n            .force('charge', manyBodyForce);\r\n\r\n        // Simulation tick handler, that sets the correct positions of all nodes.\r\n        simulation.on('tick', () => {\r\n            link.selectAll('line').attr('x1', (d) => d.source.x)\r\n                .attr('y1', (d) => d.source.y)\r\n                .attr('x2', (d) => d.target.x)\r\n                .attr('y2', (d) => d.target.y);\r\n\r\n            node.selectAll('circle').attr('cx', (d) => d.x).attr('cy', (d) => d.y);\r\n        });\r\n\r\n        // Dragging Handlers\r\n        function dragstarted(event) {\r\n            dragging = true;\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            event.subject.fx = event.subject.x;\r\n            event.subject.fy = event.subject.y;\r\n        }\r\n\r\n        function dragged(event) {\r\n            event.subject.fx = event.x;\r\n            event.subject.fy = event.y;\r\n        }\r\n\r\n        function dragended(event) {\r\n            dragging = false;\r\n            if (!event.active) simulation.alphaTarget(0).alphaDecay(1 - 0.001 ^ (1 / 300));\r\n            event.subject.fx = null;\r\n            event.subject.fy = null;\r\n        }\r\n\r\n        // infobox.call( d3.drag()\r\n        //     .on( 'drag', function ( event ) {\r\n        //         infobox.style( 'top', event.y + 'px' );\r\n        //         infobox.style( 'left', event.x + 'px' );\r\n        //     } ) );\r\n\r\n        // Job color scale that is used to color nodes based on jobs\r\n        let { jobColors} = getOptions(CONTEXT_ID);\r\n\r\n        // Resize handler that is called when the window size changes\r\n        let resize = () => {\r\n            let width = visBox.current.offsetWidth;\r\n            let height = visBox.current.offsetHeight;\r\n\r\n            svg.attr('viewBox', [-width / 2, -height / 2, width, height]);\r\n        };\r\n\r\n        window.addEventListener('resize', resize);\r\n\r\n        // Fixes a bug where the initial size is not correct\r\n        setTimeout(resize, 10);\r\n\r\n        let cancelHover = false;\r\n\r\n        // Update handler for all things that depend on the nodes and links\r\n        let update = (nodes, links, maxDegree, getOptions, setOptions) => {\r\n\r\n            const options = getOptions(VIS_ID);\r\n\r\n            // Make a shallow copy to protect against mutation, while\r\n            // recycling old nodes to preserve position and velocity.\r\n            const old = new Map(node.selectAll('circle').data().map(d => [d.id, d]));\r\n\r\n            nodes = nodes.map(d => ({ ...(old.get(d.id) || {}), ...d }));\r\n            links = links.map(d => ({ ...d }));\r\n\r\n            // if dynamic nodes is set then make the lines be dynamic\r\n            if (options.dynamicEdges) {\r\n                manyBodyForce.strength(links.length * -0.01 * options.edgeScaleFactor - options.edgeSize);\r\n            } else {\r\n                // otherwise keep it the same\r\n                manyBodyForce.strength(-options.edgeSize);\r\n            }\r\n\r\n            // Apply nodes & links to the simulation\r\n            simulation.nodes(nodes);\r\n            linkForce.links(links);\r\n\r\n            // Apply nodes & links in the SVG\r\n            link.selectAll('line').data(links).join('line');\r\n            node.selectAll('circle').data(nodes).join('circle');\r\n\r\n            // Remove all title elements such that they can be recreated with correct info\r\n            // (This is a kind of inefficient way of doing things, but this will probably get replaced by a pop-up when a node is clicked or something)\r\n            node.selectAll('circle').selectAll('title').remove();\r\n\r\n            let { hoveredNode, selectedNode, emailsSent, emailsReceived } = getOptions(CONTEXT_ID);\r\n            \r\n            // On click show infobox for node\r\n            node.selectAll('circle')\r\n                .on('click', function (d, i) {\r\n                    let currentOptions = getOptions(CONTEXT_ID);\r\n                    if (i.id === currentOptions.selectedNode) {\r\n                        setOptions(CONTEXT_ID, {\r\n                            ...currentOptions, selectedNode: null,\r\n                            emailsSent: 0, emailsReceived: 0, position: null\r\n                        });\r\n                        link.selectAll('line').attr('stroke', '#999');\r\n                    } else {\r\n                        setOptions(CONTEXT_ID, {\r\n                            ...currentOptions, selectedNode: i.id,\r\n                            emailsSent: i.outDegree, emailsReceived: i.inDegree, position: i.job\r\n                        });\r\n                        link.selectAll('line').attr('stroke', function(d) {\r\n                            if ((d.source.id === i.id) || (d.target.id === i.id)) {\r\n                                return 'red';\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .on('mouseover', function (d, i) {\r\n                    if (!dragging) {\r\n                        // checks if hover is cancelled within 100ms\r\n                        cancelHover = false;\r\n                        setTimeout(() => { \r\n                            if (cancelHover == false) {\r\n                                setOptions(CONTEXT_ID, {\r\n                                    ...getOptions(CONTEXT_ID),\r\n                                    hoveredNode: i.id\r\n                                });\r\n                                link.selectAll('line').attr('stroke', function(ds) {\r\n                                    if (((ds.source.id === selectedNode) || (ds.target.id === selectedNode))) {\r\n                                        return 'red';\r\n                                    }\r\n                                    if ((ds.source.id === i.id) || (ds.target.id === i.id)) { //\r\n                                        return 'black';\r\n                                    }  \r\n                                    return '#999';\r\n                                });\r\n                            }\r\n                        }, 100);\r\n                    }   \r\n                    \r\n                })\r\n                .on('mouseout', function (d, i) {\r\n                    cancelHover = true;\r\n                    if (!dragging && hoveredNode != null) {\r\n                        setOptions(CONTEXT_ID, {\r\n                            ...getOptions(CONTEXT_ID),\r\n                            hoveredNode: null\r\n                        });\r\n                        link.selectAll('line').attr('stroke', function(ds) {\r\n                            if (((ds.source.id === selectedNode) || (ds.target.id === selectedNode))) {\r\n                                return 'red';\r\n                            }\r\n                            return '#999';    \r\n                        });\r\n                    }\r\n                    if (dragging) {\r\n                        link.selectAll('line').attr('stroke', function(ds) {\r\n                            if (((ds.source.id === selectedNode) || (ds.target.id === selectedNode))) {\r\n                                return 'red';\r\n                            }\r\n                            if ((ds.source.id === i.id) || (ds.target.id === i.id)) {\r\n                                return 'black';\r\n                            }\r\n                            return '#999';\r\n                            \r\n                        });\r\n                    } \r\n                    \r\n                    \r\n                });\r\n\r\n            // Apply attributes to all nodes\r\n            var currentNodePresent = false; // this is to check if prev. selected node is present in current drawing.\r\n            let legendContentText = '';\r\n            let jobs = new Map();\r\n\r\n            // Apply attributes to all nodes\r\n            node.selectAll('circle')\r\n                .attr('fill', (d) => {\r\n                    let color = '#067f5b';\r\n\r\n                    if (options.colorBy) {\r\n                        color = jobColors(d.job);\r\n                        if (jobs.has(d.job)) {\r\n                            jobs.set(d.job, jobs.get(d.job) + 1);\r\n                        } else {\r\n                            jobs.set(d.job,1);\r\n                        }\r\n                    }\r\n\r\n                    return color;\r\n                })\r\n                .style('stroke', (d) => {\r\n                    if (d.id === selectedNode || d.id === hoveredNode) {\r\n                        link.selectAll('line').attr('stroke', function(ds) {\r\n                            if ((ds.source.id === selectedNode) || (ds.target.id === selectedNode)) {\r\n                                return 'red';\r\n                            }\r\n                            if ((ds.source.id === hoveredNode) || (ds.target.id === hoveredNode)) {\r\n                                return 'black';\r\n                            }\r\n                            return '#999';\r\n                        });\r\n                    }\r\n\r\n                    if (d.id === selectedNode ) {\r\n                        return 'red';\r\n                    } else if ( d.id === hoveredNode ) {\r\n                        return 'black';\r\n                    }\r\n                    return 'white';\r\n                })\r\n                .each(function (d) {\r\n                    if (selectedNode === d.id) {\r\n                        currentNodePresent = true;\r\n                        if (emailsSent != d.outDegree || emailsReceived != d.inDegree) {\r\n                            // If something has changed, update the context\r\n                            setOptions(CONTEXT_ID, {\r\n                                ...getOptions(CONTEXT_ID),\r\n                                selectedNode: d.id,\r\n                                emailsSent: d.outDegree,\r\n                                emailsReceived: d.inDegree\r\n                            });\r\n                        }\r\n                    }\r\n                })\r\n                .call(d3.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended))\r\n                .append('title')\r\n                .text((d) => `Email: ${d.id} + \\nDegree: ${d.degree} \\ninDegree: ${d.inDegree} \\noutDegree: ${d.outDegree} \\nJob: ${d.job}`);\r\n\r\n            if (!currentNodePresent && selectedNode !== null && (emailsSent !== 0 || emailsReceived !== 0)) {\r\n                setOptions(CONTEXT_ID, { ...getOptions(CONTEXT_ID), emailsSent: 0, emailsReceived: 0 });\r\n            }\r\n\r\n            let jobsSorted = new Map([...jobs.entries()].sort());\r\n\r\n            for (let [key, value] of jobsSorted) {\r\n                legendContentText += `<p><span style='color: ${jobColors( key )};'>&#11044</span> ${key}<span style=\"float: right\">${value}</span></p>`;\r\n            }\r\n            legendContent.html(legendContentText);\r\n\r\n            if (showLegend) {\r\n                legend.style('max-height', (legendContent.node().offsetHeight + 67) + 'px');\r\n            }\r\n\r\n            // if dynamicNodes set then make size dynamic\r\n            if (options.dynamicNodes) {\r\n                node.selectAll('circle').attr('r', (d) => (1 + d.degree * options.nodeScaleFactor / maxDegree) * options.nodeSize);\r\n            } else {\r\n                // otherwise keep default\r\n                node.selectAll('circle').attr('r', options.nodeSize);\r\n            }\r\n\r\n            // Restart the simulation by 'reheating' it with a higher alpha.\r\n            simulation.alpha(0.3).alphaTarget(0).alphaDecay(1 - 0.001 ^ (1 / 1000)).restart();\r\n        };\r\n\r\n        // Initialize nodes and links with an empty list.\r\n        update([], [], 0, getOptions, setOptions);\r\n\r\n        // Provide the update and resize functions in the state such that other hooks can use it.\r\n        setVisualisation({\r\n            update: update\r\n        });\r\n\r\n        // When the component unmounts, we will remove the SVG and resize listener\r\n        return () => {\r\n            d3.select(visBox.current).selectAll('*').remove();\r\n            window.removeEventListener('resize', resize);\r\n        };\r\n    }, []);\r\n\r\n    // #endregion\r\n\r\n    // #region --------------- DATA HANDLING --------------\r\n\r\n    /**\r\n     * Data Handling is built up of 3 stages, that all have their own useEffect hook.\r\n     *\r\n     * 1. Prepare & format: The raw dataset is transformed into links and nodes.\r\n     *    This step is only executed when the dataset changes for performance.\r\n     * 2. Filter: filter the dataset based on the date range specified.\r\n     *    This step takes all e-mails (links) and filters them based on the date range and adds the correct nodes.\r\n     * 3. Update: use the filtered data and update the D3 visualisation\r\n     */\r\n\r\n    // Prepare & format the provided dataset\r\n    useEffect(() => {\r\n\r\n        let formatted = { links: [], nodes: new Map() };\r\n\r\n        dataset.forEach((data) => {\r\n            const { fromEmail, toEmail, date, fromJobtitle, toJobtitle } = data;\r\n\r\n            let emailDate = moment(date);\r\n\r\n            // Add nodes for the from and to addresses if they do not already exist with job as metadata\r\n            if (!formatted.nodes.has(fromEmail))\r\n                formatted.nodes.set(fromEmail, { id: fromEmail, job: fromJobtitle });\r\n            if (!formatted.nodes.has(toEmail))\r\n                formatted.nodes.set(toEmail, { id: toEmail, job: toJobtitle });\r\n\r\n            // Add a link between to employees for each email (does not filter out duplicate links because they might have different dates)\r\n            formatted.links.push({ source: fromEmail, target: toEmail, date: emailDate });\r\n\r\n        });\r\n\r\n        setFormattedData(formatted);\r\n\r\n    }, [dataset]);\r\n\r\n    // Data filterer that will execute if a user changes options\r\n    useEffect(() => {\r\n        // If there is no data available, ignore update\r\n        // if (getOptions(CONTEXT_ID).selectedNode !== recentID){\r\n        //     return;\r\n        // }\r\n        if (!formattedData)\r\n            return;\r\n\r\n        const startDate = new Date(moment(globalOptions.timeline).subtract(globalOptions.previousDays, 'days'));\r\n        const endDate = new Date(globalOptions.timeline);\r\n\r\n        let filtered = { nodes: [], links: [], maxDegree: 0 };\r\n\r\n        // Links & nodes maps to eliminate duplicates\r\n        let links = new Map();\r\n        let nodes = new Map();\r\n\r\n        // Loop through all links in the dataset.\r\n        // For each one that falls within the date range, we add it (if it does not already exist) and add the source and target.\r\n        formattedData.links.forEach((link) => {\r\n\r\n            if (link.date < startDate || link.date > endDate)\r\n                return;\r\n\r\n            if (!nodes.has(link.source)) {\r\n                let node = formattedData.nodes.get(link.source);\r\n\r\n                // Set all degrees to zero. These will be computed in the next loop\r\n                node.degree = 0;\r\n                node.outDegree = 0;\r\n                node.inDegree = 0;\r\n\r\n                filtered.nodes.push(node);\r\n\r\n                nodes.set(link.source, true);\r\n            }\r\n\r\n            if (!nodes.has(link.target)) {\r\n                let node = formattedData.nodes.get(link.target);\r\n\r\n                // Set all degrees to zero. These will be computed in the next loop\r\n                node.degree = 0;\r\n                node.outDegree = 0;\r\n                node.inDegree = 0;\r\n\r\n                filtered.nodes.push(node);\r\n\r\n                nodes.set(link.target, true);\r\n            }\r\n\r\n            if (!links.has(`${link.source}${link.target}`) && !links.has(`${link.target}${link.source}`)) {\r\n                filtered.links.push(link);\r\n                links.set(`${link.source}${link.target}`, true);\r\n            }\r\n\r\n            let source = formattedData.nodes.get( link.source );\r\n            let target = formattedData.nodes.get( link.target );\r\n\r\n            source.outDegree++;\r\n            source.degree++;\r\n            target.inDegree++;\r\n            target.degree++;\r\n        });\r\n\r\n        // We compute the degree of each node and link\r\n        filtered.nodes.forEach((node) => {\r\n            filtered.maxDegree = node.degree > filtered.maxDegree ? node.degree : filtered.maxDegree;\r\n        });\r\n\r\n        setFilteredData(filtered);\r\n\r\n\r\n    }, [formattedData, globalOptions, options]);\r\n\r\n    // Update when filtered data changes\r\n    useEffect(() => {\r\n        if (!filteredData || !visualisation.update)\r\n            return;\r\n\r\n        visualisation.update(filteredData.nodes, filteredData.links, filteredData.maxDegree, getOptions, setOptions);\r\n\r\n    }, [filteredData]);\r\n\r\n    // #endregion\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ margin: '10px 20px' }}>{VIS_ID}</h1>\r\n            <div ref={visBox} style={{ position: 'absolute', top: 50, width: '100%', height: 'calc(100% - 50px)' }} />\r\n        </div>\r\n    );\r\n}\r\n","import { Button, Popconfirm, message } from 'antd';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport domtoimage from 'dom-to-image';\r\nimport { SaveFilled, QuestionCircleOutlined } from '@ant-design/icons';\r\nimport './SaveImage.css';\r\n\r\n/**\r\n * Renders the button that allows the user to download the graph as a png file\r\n */\r\nexport default function SaveImage( { id } ) {\r\n    const filter = ( node ) => {\r\n        return node.tagName !== 'BUTTON';\r\n    };\r\n\r\n    const save = () => {\r\n        //Use domtoimage to create the png file\r\n        domtoimage.toPng( document.getElementById( id ), { filter: filter } ).then( function( dataUrl ) {\r\n            var link = document.createElement( 'a' );\r\n\r\n            link.download = 'vis.png';\r\n            link.href = dataUrl;\r\n            link.click();\r\n        } );\r\n        message.success( 'Image downloaded' );\r\n    };\r\n\r\n    const cancel = () => {\r\n        message.error( 'Canceled download' );\r\n    };\r\n\r\n    return (\r\n        <Popconfirm\r\n            onConfirm={save}\r\n            onCancel={cancel}\r\n            okText='Yes'\r\n            cancelText='No'\r\n            title='Do you want to save a .png of the graph?'\r\n            placement='topRight'\r\n            icon={<QuestionCircleOutlined style={{ color: 'gray' }} />}\r\n        >\r\n            <Button type='primary' className='save-button' icon={<SaveFilled />} />\r\n        </Popconfirm>\r\n    );\r\n}\r\n\r\nSaveImage.propTypes = {\r\n    id: PropTypes.string.isRequired\r\n};\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport moment from 'moment';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport * as d3 from 'd3';\r\nimport { DataContext } from '../../../context/data';\r\n\r\nconst VIS_ID = 'Force-Directed Graph';\r\nconst CONTEXT_ID = 'Global';\r\n\r\nexport default function FDVisualization() {\r\n\r\n    // #region ------------------ SETUP -------------------\r\n\r\n    const [ getOptions, setOptions ] = useContext( GlobalContext );\r\n\r\n    const globalOptions = getOptions( CONTEXT_ID );\r\n\r\n    let [ visualisation, setVisualisation ] = useState( {\r\n        /**\r\n         * @type {( nodes, links, maxDegree, options ) => void}\r\n         */\r\n        update: null\r\n    } );\r\n    \r\n    // Variables used for Legend\r\n    var showLegend = false;\r\n\r\n    let [ dataset ] = React.useContext( DataContext );\r\n\r\n    let [ formattedData, setFormattedData ] = useState(\r\n        /**\r\n         * Formatted dataset that can be used by the force-directed graph\r\n         * @type {{\r\n         *     nodes: Map<string, { id: string, job: string }>,\r\n         *     links: { source: string, target: string, date: moment.Moment }[]\r\n         * }}\r\n         */\r\n        null\r\n    );\r\n\r\n    let [ filteredData, setFilteredData ] = useState(\r\n        /**\r\n         * Filtered dataset within a specific date range\r\n         * @type {{\r\n         *     nodes: { id: string, job: string }[],\r\n         *     links: { source: string, target: string, date: moment.Moment }[],\r\n         *     maxDegree: number,\r\n         * }}\r\n         */\r\n        null\r\n    );\r\n\r\n    const options = getOptions( VIS_ID );\r\n\r\n    // Reference to the visualisation element\r\n    const visBox = useRef();\r\n\r\n    var dragging = false;\r\n\r\n    // #endregion\r\n\r\n    // #region ----------------- D3 SETUP -----------------\r\n\r\n    // Set-up the SVG drawing\r\n    useEffect( () => {\r\n\r\n        // Initialize all SVG elements\r\n        let svg = d3\r\n            .select( visBox.current )\r\n            .append( 'svg' )\r\n            .style( 'height', '100%' )\r\n            .style( 'width', '100%' );\r\n\r\n        let link = svg\r\n            .append( 'g' )\r\n            .attr( 'stroke', '#999' )\r\n            .attr( 'stroke-opacity', 0.6 );\r\n\r\n        let node = svg\r\n            .append( 'g' )\r\n            .attr( 'stroke', '#fff' )\r\n            .attr( 'stroke-width', 1.5 );\r\n\r\n        var zoom = d3.zoom().on( 'zoom', function ( event ) {\r\n            // console.log( event.transform );\r\n            node.attr( 'transform', event.transform );\r\n            link.attr( 'transform', event.transform );\r\n        } );\r\n\r\n        svg.call( zoom );\r\n\r\n        d3.select( visBox.current )\r\n            .append( 'button' )\r\n            .html( 'Reset Zoom' )\r\n            .style( 'position', 'absolute' )\r\n            .style( 'bottom', '20px' )\r\n            .style( 'left', '0' )\r\n            .style( 'right', '0' )\r\n            .style( 'margin', 'auto' )\r\n            .classed( 'ant-btn ant-btn-primary', true )\r\n            .on( 'click', () => {\r\n                svg\r\n                    .transition()\r\n                    .duration( 600 )\r\n                    .call( zoom.transform, d3.zoomIdentity );\r\n            } );\r\n\r\n        var legend = d3.select( visBox.current )\r\n            .append( 'div' )\r\n            .style( 'bottom', '20px' )\r\n            .style( 'left', '20px' )\r\n            .style( 'position', 'absolute' )\r\n            .style( 'background-color', 'white' )\r\n            .style( 'border-radius', '10px' )\r\n            .style( 'padding', '10px 15px 0 15px' )\r\n            .style( 'width', '200px' )\r\n            .style( 'overflow', 'hidden' )\r\n            .style( 'max-height', '53px' )\r\n            .style( 'transition', 'all 250ms ease-in-out 0s' );\r\n\r\n        var legendHeader = legend\r\n            .append( 'div' )\r\n            .style( 'display', 'flex' )\r\n            .style( 'justify-content', 'space-between' )\r\n            .style( 'align-items', 'center' )\r\n            .style( 'margin-bottom', '10px' )\r\n            .html( \"<h2 style='margin: 0;'>Legend</h2>\" );\r\n\r\n        var legendContent = legend.append( 'div' );\r\n\r\n        var legendButton = legendHeader\r\n            .append( 'a' )\r\n            .style( 'background', 'none' )\r\n            // .style( 'color', 'blue' )\r\n            .style( 'border', 'none' )\r\n            .style( 'text-decoration', 'none' )\r\n            .style( 'font-size', '1rem' )\r\n            .html( 'Show' )\r\n            .on( 'click', () => {\r\n                if ( showLegend ) {\r\n                    legendButton.html( 'Show' );\r\n                    legend.style( 'max-height', '53px' );\r\n                } else {\r\n                    legendButton.html( 'Hide' );\r\n                    legend.style( 'max-height', ( legendContent.node().offsetHeight + 67 ) + 'px' );\r\n                }\r\n                showLegend = !showLegend;\r\n            } )\r\n            .on( 'mouseover', () => {\r\n                legendButton.style( 'text-decoration', 'underline' );\r\n            } )\r\n            .on( 'mouseout', () => {\r\n                legendButton.style( 'text-decoration', 'none' );\r\n            } );\r\n        \r\n        legendButton;\r\n       \r\n\r\n        // Initialize forces & simulation\r\n        let manyBodyForce = d3.forceManyBody();\r\n        let linkForce     = d3.forceLink( [] ).id( ( d ) => d.id );\r\n        \r\n        function getBoxForce( width, height ) {\r\n            let nodes = [];\r\n            let force = function() {\r\n                for ( var i = 0, n = nodes.length; i < n; ++i ) {\r\n                    var curr_node = nodes[i];\r\n                    var radius = 20;\r\n\r\n                    curr_node.x = Math.max( radius, Math.min( width - radius, curr_node.x ) );\r\n                    curr_node.y = Math.max( radius, Math.min( height - radius, curr_node.y ) );\r\n                }\r\n            };\r\n\r\n            force.initialize = function( n ) { nodes = n; };\r\n\r\n            return force;\r\n        }\r\n\r\n        let simulation = d3\r\n            .forceSimulation( [] )\r\n            .force( 'center'   , d3.forceCenter( 0, 0 ) )\r\n            .force( 'charge'   , manyBodyForce )\r\n            .force( 'box_force', getBoxForce( 0, 0 ) )\r\n            .force( 'link'     , linkForce );\r\n\r\n        // Simulation tick handler, that sets the correct positions of all nodes.\r\n        simulation.on( 'tick', () => {\r\n            link.selectAll( 'line' ).attr( 'x1', ( d ) => d.source.x )\r\n                .attr( 'y1', ( d ) => d.source.y )\r\n                .attr( 'x2', ( d ) => d.target.x )\r\n                .attr( 'y2', ( d ) => d.target.y );\r\n\r\n            node.selectAll( 'circle' ).attr( 'cx', ( d ) => d.x ).attr( 'cy', ( d ) => d.y );\r\n        } );\r\n\r\n        // Dragging Handlers\r\n        function dragstarted( event ) {\r\n            dragging = true;\r\n            if ( !event.active ) simulation.alphaTarget( 0.3 ).restart();\r\n            event.subject.fx = event.subject.x;\r\n            event.subject.fy = event.subject.y;\r\n        }\r\n\r\n        function dragged( event ) {\r\n            event.subject.fx = event.x;\r\n            event.subject.fy = event.y;\r\n        }\r\n\r\n        function dragended( event ) {\r\n            dragging = false;\r\n            if ( !event.active ) simulation.alphaTarget( 0 ).alphaDecay( 1 - 0.001 ^ ( 1 / 300 ) );\r\n            event.subject.fx = null;\r\n            event.subject.fy = null;\r\n        }\r\n        \r\n        // Job color scale that is used to color nodes based on jobs\r\n        let { jobColors } = getOptions(CONTEXT_ID);\r\n\r\n        // Resize handler that is called when the window size changes\r\n        let resize = () => {\r\n            let width  = visBox.current.offsetWidth;\r\n            let height = visBox.current.offsetHeight;\r\n\r\n            simulation\r\n                .force( 'center', null )\r\n                .force( 'box_force', null );\r\n            \r\n            simulation\r\n                .force( 'center', d3.forceCenter( width / 2, height / 2 ) )\r\n                .force( 'box_force', getBoxForce( width, height ) );\r\n\r\n            simulation.restart();\r\n\r\n            svg.attr( 'viewBox', [ 0, 0, width, height ] );\r\n        };\r\n        \r\n        window.addEventListener( 'resize', resize );\r\n\r\n        // Fixes a bug where the initial size is not correct\r\n        setTimeout( resize, 10 );\r\n\r\n        let cancelHover = false;\r\n\r\n        // Update handler for all things that depend on the nodes and links\r\n        let update = ( nodes, links, maxDegree, getOptions, setOptions ) => {\r\n\r\n            const options       = getOptions( VIS_ID     );\r\n\r\n            // Make a shallow copy to protect against mutation, while\r\n            // recycling old nodes to preserve position and velocity.\r\n            const old = new Map( node.selectAll( 'circle' ).data().map( d => [ d.id, d ] ) );\r\n\r\n            nodes = nodes.map( d => ( { ...( old.get( d.id ) || {} ), ...d } ) );\r\n            links = links.map( d => ( { ...d } ) );\r\n\r\n            // if dynamic nodes is set then make the lines be dynamic\r\n            if ( options.dynamicEdges ) {\r\n                manyBodyForce.strength( links.length * -0.01 * options.edgeScaleFactor - options.edgeSize );\r\n            } else {\r\n                // otherwise keep it the same\r\n                manyBodyForce.strength( -options.edgeSize );\r\n            }\r\n\r\n            // Apply nodes & links to the simulation\r\n            simulation.nodes( nodes );\r\n            linkForce .links( links );\r\n\r\n            // Apply nodes & links in the SVG\r\n            link.selectAll( 'line'   ).data( links ).join( 'line' );\r\n            node.selectAll( 'circle' ).data( nodes ).join( 'circle' );\r\n            \r\n            // Remove all title elements such that they can be recreated with correct info\r\n            // (This is a kindof inefficient way of doing things, but this will probably get replaced by a pop-up when a node is clicked or something)\r\n            node.selectAll( 'circle' ).selectAll( 'title' ).remove();\r\n\r\n            let { hoveredNode, selectedNode, emailsSent, emailsReceived } = getOptions(CONTEXT_ID);\r\n            \r\n            //on click update border and selected node\r\n            node.selectAll('circle')\r\n                .on('click', function (d, i) {\r\n                    let currentOptions = getOptions(CONTEXT_ID);\r\n                    if (i.id === currentOptions.selectedNode) {\r\n                        setOptions(CONTEXT_ID, {\r\n                            ...currentOptions, selectedNode: null,\r\n                            emailsSent: 0, emailsReceived: 0, position: null\r\n                        });\r\n                        link.selectAll('line').attr('stroke', '#999');\r\n                    } else {\r\n                        setOptions(CONTEXT_ID, {\r\n                            ...currentOptions, selectedNode: i.id,\r\n                            emailsSent: i.outDegree, emailsReceived: i.inDegree, position: i.job\r\n                        });\r\n                        link.selectAll('line').attr('stroke', function(d) {\r\n                            if ((d.source.id === i.id) || (d.target.id === i.id)) {\r\n                                return 'red';\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .on('mouseover', function (d, i) {\r\n                    if (!dragging) {\r\n                        // checks if hover is cancelled within 100ms\r\n                        cancelHover = false;\r\n                        setTimeout(() => { \r\n                            if (cancelHover == false) {\r\n                                setOptions(CONTEXT_ID, {\r\n                                    ...getOptions(CONTEXT_ID),\r\n                                    hoveredNode: i.id\r\n                                });\r\n                                link.selectAll('line').attr('stroke', function(ds) {\r\n                                    if (((ds.source.id === selectedNode) || (ds.target.id === selectedNode))) {\r\n                                        return 'red';\r\n                                    }\r\n                                    if ((ds.source.id === i.id) || (ds.target.id === i.id)) { //\r\n                                        return 'black';\r\n                                    }  \r\n                                    return '#999';\r\n                                });\r\n                            }\r\n                        }, 100);\r\n                    }   \r\n                    \r\n                })\r\n                .on('mouseout', function (d, i) {\r\n                    cancelHover = true;\r\n                    if (!dragging && hoveredNode != null) {\r\n                        setOptions(CONTEXT_ID, {\r\n                            ...getOptions(CONTEXT_ID),\r\n                            hoveredNode: null\r\n                        });\r\n                        link.selectAll('line').attr('stroke', function(ds) {\r\n                            if (((ds.source.id === selectedNode) || (ds.target.id === selectedNode))) {\r\n                                return 'red';\r\n                            }\r\n                            return '#999';    \r\n                        });\r\n                    }\r\n                    if (dragging) {\r\n                        link.selectAll('line').attr('stroke', function(ds) {\r\n                            if (((ds.source.id === selectedNode) || (ds.target.id === selectedNode))) {\r\n                                return 'red';\r\n                            }\r\n                            if ((ds.source.id === i.id) || (ds.target.id === i.id)) {\r\n                                return 'black';\r\n                            }\r\n                            return '#999';\r\n                            \r\n                        });\r\n                    }\r\n                });\r\n\r\n                \r\n            // Apply attributes to all nodes\r\n            var currentNodePresent = false; // this is to check if prev. selected node is present in current drawing.\r\n            let legendContentText = '';\r\n            let jobs = new Map();\r\n\r\n\r\n            node.selectAll('circle')\r\n                .attr('fill', (d) => {\r\n                    // console.log( d.job );\r\n                    let color = '#067f5b';\r\n\r\n                    if (options.colorBy) {\r\n                        color = jobColors(d.job);\r\n                        if (jobs.has(d.job)) {\r\n                            jobs.set(d.job, jobs.get(d.job) + 1);\r\n                        } else {\r\n                            jobs.set(d.job, 1);\r\n                        }\r\n                    }\r\n\r\n                    return color;\r\n                })\r\n                .style('stroke', (d) => {\r\n                    if (d.id === selectedNode || d.id === hoveredNode) {\r\n                        link.selectAll('line').attr('stroke', function(ds) {\r\n                            if ((ds.source.id === selectedNode) || (ds.target.id === selectedNode)) {\r\n                                return 'red';\r\n                            }\r\n                            if ((ds.source.id === hoveredNode) || (ds.target.id === hoveredNode)) {\r\n                                return 'black';\r\n                            }\r\n                            return '#999';\r\n                        });\r\n                    }\r\n\r\n                    if (d.id === selectedNode ) {\r\n                        return 'red';\r\n                    } else if ( d.id === hoveredNode ) {\r\n                        return 'black';\r\n                    }\r\n                    return 'white';\r\n                })\r\n                .each(function (d) {\r\n                    if (selectedNode === d.id) {\r\n                        currentNodePresent = true;\r\n                        if (emailsSent != d.outDegree || emailsReceived != d.inDegree) {\r\n                            // If something has changed, update the context\r\n                            setOptions(CONTEXT_ID, {\r\n                                ...getOptions(CONTEXT_ID),\r\n                                selectedNode: d.id,\r\n                                emailsSent: d.outDegree,\r\n                                emailsReceived: d.inDegree\r\n                            });\r\n                        }\r\n                    }\r\n                })\r\n                .call( d3.drag().on( 'start', dragstarted ).on( 'drag', dragged ).on( 'end', dragended ) )\r\n                .append( 'title' )\r\n                .text( ( d ) => `Email: ${d.id} + \\nDegree: ${d.degree} \\ninDegree: ${d.inDegree} \\noutDegree: ${d.outDegree} \\nJob: ${d.job}` );\r\n\r\n            if (!currentNodePresent && selectedNode !== null && (emailsSent !== 0 || emailsReceived !== 0)) {\r\n                setOptions(CONTEXT_ID, { ...getOptions(CONTEXT_ID), emailsSent: 0, emailsReceived: 0 });\r\n            }\r\n\r\n            let jobsSorted = new Map( [ ...jobs.entries() ].sort() );\r\n\r\n            for ( let [ key, value ] of jobsSorted ) {\r\n                legendContentText += `<p><span style='color: ${jobColors( key )};'>&#11044</span> ${key}<span style=\"float: right\">${value}</span></p>`;\r\n            }\r\n            legendContent.html( legendContentText );\r\n\r\n            if ( showLegend ) {\r\n                legend.style( 'max-height', ( legendContent.node().offsetHeight + 67 ) + 'px' );\r\n            }\r\n\r\n            // if dynamicNodes set then make size dynamic\r\n            if ( options.dynamicNodes ) {\r\n                node.selectAll( 'circle' ).attr( 'r', ( d ) => ( 1 + d.degree * options.nodeScaleFactor / maxDegree ) * options.nodeSize );\r\n            } else {\r\n                // otherwise keep default\r\n                node.selectAll( 'circle' ).attr( 'r', options.nodeSize );\r\n            }\r\n\r\n            // Restart the simulation by 'reheating' it with a higher alpha.\r\n            simulation.alpha( 0.3 ).alphaTarget( 0 ).alphaDecay( 1 - 0.001 ^ ( 1 / 1000 ) ).restart();\r\n        };\r\n\r\n        // Initialize nodes and links with an empty list.\r\n        update( [], [], 0, getOptions, setOptions );\r\n\r\n        // Provide the update and resize functions in the state such that other hooks can use it.\r\n        setVisualisation( {\r\n            update: update\r\n        } );\r\n\r\n        // When the component unmounts, we will remove the SVG and resize listener\r\n        return () => {\r\n            d3.select( visBox.current ).selectAll( '*' ).remove();\r\n            window.removeEventListener( 'resize', resize );\r\n        };\r\n    }, [] );\r\n\r\n    // #endregion\r\n\r\n    // #region --------------- DATA HANDLING --------------\r\n\r\n    /**\r\n     * Data Handling is built up of 3 stages, that all have their own useEffect hook.\r\n     * \r\n     * 1. Prepare & format: The raw dataset is transformed into links and nodes.\r\n     *    This step is only executed when the dataset changes for performance.\r\n     * 2. Filter: filter the dataset based on the date range specified.\r\n     *    This step takes all e-mails (links) and filters them based on the date range and adds the correct nodes.\r\n     * 3. Update: use the filtered data and update the D3 visualisation\r\n     */\r\n\r\n    // Prepare & format the provided dataset\r\n    useEffect( () => {\r\n\r\n        let formatted = { links: [], nodes: new Map() };\r\n\r\n        dataset.forEach( ( data ) => {\r\n            const { fromEmail, toEmail, date, fromJobtitle, toJobtitle } = data;\r\n\r\n            let emailDate = moment( date );\r\n\r\n            // Add nodes for the from and to addresses if they do not already exist with job as metadata\r\n            if ( !formatted.nodes.has( fromEmail ) )\r\n                formatted.nodes.set( fromEmail, { id: fromEmail, job: fromJobtitle } );\r\n            if ( !formatted.nodes.has( toEmail ) )\r\n                formatted.nodes.set( toEmail, { id: toEmail, job: toJobtitle } );\r\n\r\n            // Add a link between to employees for each email (does not filter out duplicate links because they might have different dates)\r\n            formatted.links.push( { source: fromEmail, target: toEmail, date: emailDate } );\r\n\r\n        } );\r\n\r\n        setFormattedData( formatted );\r\n\r\n    }, [ dataset ] );\r\n\r\n    // Data filterer that will execute if a user changes options\r\n    useEffect( () => {\r\n        // If there is no data available, ignore update\r\n        if ( !formattedData )\r\n            return;\r\n        \r\n        const startDate = new Date( moment( globalOptions.timeline ).subtract( globalOptions.previousDays, 'days' ) );\r\n        const endDate = new Date( globalOptions.timeline );\r\n\r\n        let filtered = { nodes: [], links: [], maxDegree: 0 };\r\n\r\n        // Links & nodes maps to eliminate duplicates\r\n        let links = new Map();\r\n        let nodes = new Map();\r\n\r\n        // Loop through all links in the dataset.\r\n        // For each one that falls within the date range, we add it (if it does not already exist) and add the source and target.\r\n        formattedData.links.forEach( ( link ) => {\r\n            if ( link.date < startDate || link.date > endDate )\r\n                return;\r\n\r\n            if ( !nodes.has( link.source ) ) {\r\n                let node = formattedData.nodes.get( link.source );\r\n\r\n                // Set all degrees to zero. These will be computed in the next loop\r\n                node.degree    = 0;\r\n                node.outDegree = 0;\r\n                node.inDegree  = 0;\r\n                \r\n                filtered.nodes.push( node );\r\n                \r\n                nodes.set( link.source, true );\r\n            }\r\n\r\n            if ( !nodes.has( link.target ) ) {\r\n                let node = formattedData.nodes.get( link.target );\r\n\r\n                // Set all degrees to zero. These will be computed in the next loop\r\n                node.degree    = 0;\r\n                node.outDegree = 0;\r\n                node.inDegree  = 0;\r\n                \r\n                filtered.nodes.push( node );\r\n                \r\n                nodes.set( link.target, true );\r\n            }\r\n\r\n            if ( !links.has( `${link.source}${link.target}` ) && !links.has( `${link.target}${link.source}` ) ) {\r\n                filtered.links.push( link );\r\n                links.set( `${link.source}${link.target}`, true );\r\n            }\r\n\r\n            let source = formattedData.nodes.get( link.source );\r\n            let target = formattedData.nodes.get( link.target );\r\n\r\n            source.outDegree++;\r\n            source.degree++;\r\n            target.inDegree++;\r\n            target.degree++;\r\n\r\n        } );\r\n\r\n        // We compute the degree of each node and link\r\n        filtered.nodes.forEach( ( node ) => {\r\n            filtered.maxDegree = node.degree > filtered.maxDegree ? node.degree : filtered.maxDegree;\r\n        } );\r\n\r\n        setFilteredData( filtered );\r\n\r\n    }, [ formattedData, globalOptions, options ] );\r\n\r\n    // Update when filtered data changes\r\n    useEffect( () => {\r\n        if ( !filteredData || !visualisation.update )\r\n            return;\r\n\r\n        visualisation.update( filteredData.nodes, filteredData.links, filteredData.maxDegree, getOptions, setOptions );\r\n\r\n    }, [ filteredData ] );\r\n\r\n    // #endregion\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ margin: '10px 20px' }}>{VIS_ID}</h1>\r\n            <div ref={visBox} style={{ position: 'absolute', top: 50, width: '100%', height: 'calc(100% - 50px)' }} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport moment from 'moment';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport * as d3 from 'd3';\r\nimport { DataContext } from '../../../context/data';\r\nimport { ForceGraph3D } from 'react-force-graph';\r\n\r\nconst VIS_ID = '3D Force-Directed Graph';\r\nconst CONTEXT_ID = 'Global';\r\n\r\nexport default function FD3DVisualization() {\r\n\r\n    // #region ------------------ SETUP -------------------\r\n\r\n    const [ getOptions, setOptions ] = useContext( GlobalContext );\r\n\r\n    const globalOptions = getOptions( CONTEXT_ID );\r\n\r\n    const options = getOptions( VIS_ID );\r\n\r\n    const [ dataset ] = React.useContext( DataContext );\r\n\r\n    // Reference to the visualization container\r\n    const visBox = useRef();\r\n\r\n    const [ visualization, setVisualization ] = useState();\r\n\r\n    const [ updater, setUpdater ] = useState({\r\n        /**\r\n         * @type {( graphData, maxDegree, getOptions, setOptions ) => void}\r\n         */\r\n        update: null\r\n    });\r\n\r\n    const [ formattedData, setFormattedData ] = useState(\r\n        /**\r\n         * Formatted dataset that can be used by the force-directed graph\r\n         * @type {{\r\n         *     nodes: Map<string, { id: string, job: string }>,\r\n         *     links: { source: string, target: string, date: moment.Moment }[]\r\n         * }}\r\n         */\r\n        null\r\n    );\r\n\r\n    const [ filteredData, setFilteredData ] = useState(\r\n        /**\r\n         * Filtered dataset within a specific date range\r\n         * @type {{\r\n         *     nodes: { id: string, job: string }[],\r\n         *     links: { source: string, target: string, date: moment.Moment }[],\r\n         *     maxDegree: number,\r\n         * }}\r\n         */\r\n        null\r\n    );\r\n\r\n    useEffect(() => {\r\n\r\n        // Outside update function so it remembers all jobs\r\n        let { jobColors } = getOptions(CONTEXT_ID);\r\n        // Old values needed to avoid unnecessary updates\r\n        let oldDates = [];\r\n\r\n        // Update handler for all things that depend on the nodes and links\r\n        let update = (graphData, maxDegree, getOptions, setOptions) => {\r\n\r\n            let { hoveredNode, selectedNode, emailsSent, emailsReceived } = getOptions(CONTEXT_ID);\r\n            let options = getOptions(VIS_ID);\r\n            let jobs = new Map();\r\n            let graphDataAttribute = {};\r\n\r\n            // Sets proper values for node info panel in sidebar\r\n            let updateSelectedNode = (node) => {            \r\n                if (selectedNode != node.id || emailsSent != node.outDegree || emailsReceived != node.inDegree)\r\n                    setOptions(CONTEXT_ID, {\r\n                        ...getOptions(CONTEXT_ID),\r\n                        selectedNode: node.id,\r\n                        emailsSent: node.outDegree, \r\n                        emailsReceived: node.inDegree, \r\n                        position: node.job\r\n                    });\r\n            };\r\n\r\n            // Update legend\r\n            graphData.nodes.forEach( (node) => {\r\n                if(jobs.has(node.job))\r\n                    jobs.set(node.job, jobs.get(node.job) + 1);\r\n                else\r\n                    jobs.set(node.job, 1);\r\n                \r\n                // Update selectednode because we're already looping over every node\r\n                if (node.id == selectedNode)\r\n                    updateSelectedNode(node);\r\n            });\r\n            updateLegend(jobs);\r\n\r\n            // Only update graph data if timeframe changed\r\n            if (graphData.dates[0].toString() != oldDates[0] || graphData.dates[1].toString() != oldDates[1])\r\n                graphDataAttribute = { graphData: graphData };\r\n\r\n            // Main Visualization Updater. Try to use functions outside setter to keep this readable\r\n            setVisualization(\r\n                <ForceGraph3D\r\n                    {...graphDataAttribute }\r\n                    backgroundColor='rgba(0, 0, 0, 0)'\r\n                    linkColor={(link) => isSelectedLink(link) ? 'rgba(255, 0, 0, 0.5)' : `rgba(85, 85, 85, ${options.edgeOpacity})`}\r\n                    linkDirectionalArrowLength={options.linkArrows ? 6 : 0}\r\n                    linkDirectionalArrowRelPos={0}\r\n                    linkDirectionalArrowColor={(link) => isSelectedLink(link) ? '#f00' : '#555'}\r\n                    linkDirectionalParticles={options.linkParticles ? 1 : 0}\r\n                    linkDirectionalParticleSpeed={0.005}\r\n                    linkDirectionalParticleWidth={(link) => isSelectedLink(link) ? 4 : 0}\r\n                    linkOpacity={1}\r\n                    linkWidth={(link) => isSelectedLink(link) ? 2 : 1}\r\n                    nodeColor={node => nodeColorer(node)}\r\n                    nodeLabel={node => nodeLabeler(node)}\r\n                    nodeOpacity={1}\r\n                    nodeRelSize={options.nodeSize}\r\n                    nodeVal={node => nodeSizer(node)}\r\n                    ref={(ref) => edgeSizer(ref)}\r\n                    onNodeHover={node => handleNodeHover(node)}\r\n                    onNodeClick={node => handleNodeClick(node)}\r\n                />);\r\n\r\n            // True if link is connected to selected node\r\n            let isSelectedLink = (link) => link.sender == selectedNode || link.receiver == selectedNode;\r\n                \r\n            // Sets node color based on graph options & handles legend update\r\n            let nodeColorer = (node) => {\r\n                let color = '#067f5b';\r\n                \r\n                if (options.colorBy)\r\n                    color = jobColors(node.job);\r\n\r\n                if (node.id == hoveredNode)\r\n                    color = '#000';\r\n\r\n                if (node.id == selectedNode)\r\n                    color = '#f00';\r\n\r\n                return color;\r\n            };\r\n\r\n            // Sets the node label based on email address\r\n            let nodeLabeler = (node) => {\r\n                return `<span \r\n                            style='\r\n                                color: #333;\r\n                                text-transform: capitalize; \r\n                                background: #fff;\r\n                                padding: 3px 5px;\r\n                                border-radius: 3px;\r\n                                font-weight: bold;\r\n                            '\r\n                        >\r\n                            ${node.id.replace('.', ' ').substr(0, node.id.indexOf('@'))}\r\n                        </span>`;\r\n            };\r\n\r\n            // Sets node size based on graph options\r\n            let nodeSizer = (node) => {\r\n                if (!options.dynamicNodes) \r\n                    return 1;\r\n\r\n                return (1 + node.degree * options.nodeScaleFactor * 3 / maxDegree);\r\n            };\r\n\r\n            // Sets hoveredNode in global context\r\n            let handleNodeHover = (node) => {\r\n                if (node && (node.id == hoveredNode || node.id == selectedNode) ) \r\n                    return;\r\n\r\n                setOptions(CONTEXT_ID, {\r\n                    ...getOptions(CONTEXT_ID),\r\n                    hoveredNode: node?.id || null\r\n                });\r\n            };\r\n\r\n            // Sets selectedNode in global context\r\n            let handleNodeClick = (node) => {\r\n                setOptions(CONTEXT_ID, {\r\n                    ...getOptions(CONTEXT_ID),\r\n                    selectedNode: selectedNode == node.id ? null : node.id,\r\n                    emailsSent: selectedNode == node.id ? 0 : node.outDegree, \r\n                    emailsReceived: selectedNode == node.id ? 0 : node.inDegree, \r\n                    position: selectedNode == node.id ? null : node.job\r\n                });\r\n            };\r\n\r\n            // Sets edge size (Check if changed, otherwise 'ReheatSimulation' causes chaos)\r\n            let edgeSizer = (ref) => {\r\n                // Timeout needed because ref works like magic\r\n                setTimeout(() => {\r\n                    if (!ref) {\r\n                        return;\r\n                    }\r\n\r\n                    // Only update if settings changed\r\n                    if(ref.d3Force('link').distance()() != options.edgeSize) {\r\n                        ref.d3Force('link').distance(options.edgeSize); \r\n                        ref.d3ReheatSimulation(); \r\n                    }\r\n                }, 10);\r\n            };\r\n            \r\n            oldDates[0] = graphData.dates[0].toString();\r\n            oldDates[1] = graphData.dates[1].toString();\r\n        };\r\n\r\n        setUpdater({\r\n            update: update\r\n        });\r\n\r\n        // Don't show legend by default\r\n        let showLegend = false;\r\n\r\n        // Add legend div\r\n        const legend = d3.select(visBox.current)\r\n            .append('div')\r\n            .style('position', 'absolute')\r\n            .style('bottom', '20px')\r\n            .style('left', '20px')\r\n            .style('z-index', '1000')\r\n            .style('background-color', 'white')\r\n            .style('border-radius', '10px')\r\n            .style('padding', '10px 15px 0 15px')\r\n            .style('width', '200px')\r\n            .style('overflow', 'hidden')\r\n            .style('max-height', '53px')\r\n            .style('transition', 'all 250ms ease-in-out 0s');\r\n\r\n        // Add legend header to legend\r\n        const legendHeader = legend\r\n            .append('div')\r\n            .style('display', 'flex')\r\n            .style('justify-content', 'space-between')\r\n            .style('align-items', 'center')\r\n            .style('margin-bottom', '10px')\r\n            .html(\"<h2 style='margin: 0;'>Legend</h2>\");\r\n\r\n        // Add content division to legend\r\n        const legendContent = legend.append('div');\r\n\r\n        // Add button to legendHeader\r\n        const legendButton = legendHeader\r\n            .append('a')\r\n            .style('text-decoration', 'none')\r\n            .style('font-size', '1rem')\r\n            .html('Show')\r\n            .on('click', () => {\r\n                if (showLegend) {\r\n                    legendButton.html('Show');\r\n                    legend.style('max-height', '53px');\r\n                } else {\r\n                    legendButton.html('Hide');\r\n                    legend.style('max-height', (legendContent.node().offsetHeight + 67) + 'px');\r\n                }\r\n                showLegend = !showLegend;\r\n            })\r\n            .on('mouseover', () => {\r\n                legendButton.style('text-decoration', 'underline');\r\n            })\r\n            .on('mouseout', () => {\r\n                legendButton.style('text-decoration', 'none');\r\n            });\r\n\r\n        // Sets the legend content\r\n        const updateLegend = (jobs) => {\r\n            let legendContentText = '';\r\n            let jobsSorted = new Map([...jobs.entries()].sort());\r\n            \r\n            for (let [key, value] of jobsSorted)\r\n                legendContentText += `<p><span style='color: ${jobColors(key)};'>&#11044</span> ${key}<span style=\"float: right\">${value}</span></p>`;\r\n            \r\n            legendContent.html(legendContentText);\r\n            \r\n            if (showLegend)\r\n                legend.style('max-height', (legendContent.node().offsetHeight + 67) + 'px');\r\n        };\r\n\r\n        // Resize handler that is called when the window size changes\r\n        let resize = () => {\r\n            let width  = visBox.current.offsetWidth;\r\n            let height = visBox.current.offsetHeight;\r\n\r\n            setVisualization(\r\n                <ForceGraph3D\r\n                    height={height}\r\n                    width={width}\r\n                />);\r\n        };\r\n       \r\n        const resizeObserver = new ResizeObserver(resize);\r\n        resizeObserver.observe(visBox.current);\r\n\r\n        // Fixes a bug where the initial size is not correct\r\n        setTimeout(resize, 10);\r\n\r\n        return () => {\r\n            resizeObserver.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    // Prepare & format the provided dataset\r\n    useEffect( () => {\r\n\r\n        let formatted = { links: [], nodes: new Map() };\r\n\r\n        dataset.forEach( ( data ) => {\r\n            const { fromEmail, toEmail, date, fromJobtitle, toJobtitle } = data;\r\n\r\n            let emailDate = moment( date );\r\n\r\n            // Add nodes for the from and to addresses if they do not already exist with job as metadata\r\n            if ( !formatted.nodes.has( fromEmail ) )\r\n                formatted.nodes.set( fromEmail, { id: fromEmail, job: fromJobtitle } );\r\n            if ( !formatted.nodes.has( toEmail ) )\r\n                formatted.nodes.set( toEmail, { id: toEmail, job: toJobtitle } );\r\n\r\n            // Add a link between to employees for each email (does not filter out duplicate links because they might have different dates)\r\n            formatted.links.push( { source: fromEmail, target: toEmail, date: emailDate } );\r\n\r\n        } );\r\n\r\n        setFormattedData( formatted );\r\n\r\n    }, [ dataset ] );\r\n\r\n    // Data filterer that will execute if a user changes options\r\n    useEffect( () => {\r\n        // If there is no data available, ignore update\r\n        if ( !formattedData )\r\n            return;\r\n\r\n        const startDate = new Date( moment( globalOptions.timeline ).subtract( globalOptions.previousDays, 'days' ) );\r\n        const endDate = new Date( globalOptions.timeline );\r\n\r\n        let filtered = { nodes: [], links: [], maxDegree: 0, dates: [startDate, endDate] };\r\n\r\n        // Links & nodes maps to eliminate duplicates\r\n        let links = new Map();\r\n        let nodes = new Map();\r\n\r\n        // Loop through all links in the dataset.\r\n        // For each one that falls within the date range, we add it (if it does not already exist) and add the source and target.\r\n        formattedData.links.forEach( ( link ) => {\r\n            if ( link.date < startDate || link.date > endDate )\r\n                return;\r\n\r\n            if ( !nodes.has( link.source ) ) {\r\n                let node = formattedData.nodes.get( link.source );\r\n\r\n                // Set all degrees to zero. These will be computed in the next loop\r\n                node.degree    = 0;\r\n                node.outDegree = 0;\r\n                node.inDegree  = 0;\r\n                node.links     = [];\r\n                node.neighbors = [];\r\n                \r\n                filtered.nodes.push( node );\r\n                \r\n                nodes.set( link.source, true );\r\n            }\r\n\r\n            if ( !nodes.has( link.target ) ) {\r\n                let node = formattedData.nodes.get( link.target );\r\n\r\n                // Set all degrees to zero. These will be computed in the next loop\r\n                node.degree    = 0;\r\n                node.outDegree = 0;\r\n                node.inDegree  = 0;\r\n                node.links     = [];\r\n                node.neighbors = [];\r\n                \r\n                filtered.nodes.push( node );\r\n                \r\n                nodes.set( link.target, true );\r\n            }\r\n\r\n            if ( !links.has( `${link.source}${link.target}` ) ) {\r\n                // make shallow copy to avoid breaking 'formattedData'\r\n                filtered.links.push( {...link, sender: link.source, receiver: link.target} );\r\n                links.set( `${link.source}${link.target}`, true );\r\n            }\r\n\r\n            let source = formattedData.nodes.get( link.source );\r\n            let target = formattedData.nodes.get( link.target );\r\n\r\n            source.outDegree++;\r\n            source.degree++;\r\n            target.inDegree++;\r\n            target.degree++;\r\n\r\n        } );\r\n\r\n        // We compute the degree of each node and link\r\n        filtered.links.forEach( ( link ) => {\r\n            let a = {};\r\n            let b = {};\r\n\r\n            filtered.nodes.forEach( ( node ) => {\r\n\r\n                // update degree of the source\r\n                if ( link.source === node.id )\r\n                    a = node;\r\n\r\n                // update degree of the target\r\n                if ( link.target === node.id )\r\n                    b = node;\r\n                \r\n                filtered.maxDegree = node.degree > filtered.maxDegree ? node.degree : filtered.maxDegree;\r\n            } );\r\n            \r\n            a.neighbors.push(b);\r\n            b.neighbors.push(a);\r\n  \r\n            a.links.push(link);\r\n            b.links.push(link);\r\n        } );\r\n\r\n        setFilteredData( filtered );\r\n\r\n    }, [ formattedData, globalOptions, options ] );\r\n\r\n    // Update when filtered data changes\r\n    useEffect(() => {\r\n        if (!filteredData || !updater.update)\r\n            return;\r\n    \r\n        updater.update(filteredData, filteredData.maxDegree, getOptions, setOptions);\r\n\r\n    }, [ filteredData ]);\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ margin: '10px 20px' }}>{VIS_ID}</h1>\r\n            <div ref={visBox} style={{ position: 'absolute', inset: 0, width: '100%', height: '100%' }}>\r\n                {visualization}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport { Row, Col, Result, Spin } from 'antd';\r\nimport HEBVisualization from './HEBVisualization';\r\nimport DFDVisualization from './DFDVisualization';\r\nimport SaveImage from './SaveImage';\r\nimport FDVisualization from './FDVisualization';\r\nimport FD3DVisualization from './FD3DVisualization';\r\nimport { DataContext } from '../../../context/data';\r\n\r\n/**\r\n * Creates a container and renders the selected visualizations within it.\r\n */\r\nexport default function VisContainer() {\r\n    const [ getOptions ] = useContext( GlobalContext );\r\n\r\n    const contextID = 'Global';\r\n\r\n    const { graph1, graph2 } = getOptions( contextID );\r\n\r\n    // eslint-disable-next-line\r\n    let [ dataset, setData, filename, setFilename, loading ] = React.useContext( DataContext );\r\n    \r\n    // Will render the appropriate visualization depending on the selected graph\r\n    const renderVisualizations = ( graph ) => {\r\n        switch ( graph ) {\r\n            case 'Hierarchical Edge Bundling':\r\n                return <HEBVisualization key={filename} />;\r\n            case 'Disjoint Force-Directed':\r\n                return <DFDVisualization key={filename} />;\r\n            case 'Force-Directed Graph':\r\n                return <FDVisualization key={filename} />;\r\n            case 'Arc Diagram':\r\n                return <h1>Not yet implemented!</h1>;\r\n            case '3D Force-Directed Graph':\r\n                return <FD3DVisualization key={filename} />;\r\n\r\n            default:\r\n                return <h1>Set a graph type in &#39;General Options&#39;</h1>;\r\n        }\r\n    };\r\n\r\n    if( loading )\r\n        return (\r\n            <Row\r\n                style={{\r\n                    flexGrow: '1',\r\n                    borderBottom: '1px solid rgba(124, 124, 124, 0.2)',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center'\r\n                }}\r\n            >\r\n                <Spin/>\r\n            </Row>\r\n        );\r\n\r\n    if ( !dataset )\r\n        return (\r\n            <Row\r\n                style={{\r\n                    flexGrow: '1',\r\n                    borderBottom: '1px solid rgba(124, 124, 124, 0.2)',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center'\r\n                }}\r\n            >\r\n                <Result\r\n                    status='warning'\r\n                    title='Please select a dataset from the dropdown at the top right of the sidebar.'\r\n                />\r\n            </Row>\r\n        );\r\n\r\n    return (\r\n        <Row\r\n            style={{\r\n                flexGrow: '1',\r\n                borderBottom: '1px solid rgba(124, 124, 124, 0.2)'\r\n            }}\r\n        >\r\n            <Col style={{ position: 'relative' }} span={graph2 !== 'None' ? 12 : 24} id='graph1'>\r\n                {renderVisualizations( graph1 )}\r\n                {graph1 !== '3D Force-Directed Graph' ? <SaveImage id='graph1' /> : null}\r\n            </Col>\r\n            {graph2 !== 'None' && (\r\n                <Col\r\n                    span={12}\r\n                    style={{ borderLeft: '1px solid rgba(124, 124, 124, 0.2)', position: 'relative' }}\r\n                    id='graph2'\r\n                >\r\n                    {renderVisualizations( graph2 )}\r\n                    {graph2 !== '3D Force-Directed Graph' ? <SaveImage id='graph2' /> : null}\r\n                </Col>\r\n            )}\r\n        </Row>\r\n    );\r\n}\r\n","import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport { Slider, Row, Button, Space, Dropdown, Typography, Menu } from 'antd';\r\nimport { Tooltip } from 'antd';\r\nimport { StepBackwardOutlined, StepForwardOutlined, PauseOutlined, CaretRightOutlined, FastBackwardOutlined, FastForwardOutlined, LockFilled, UnlockOutlined, DownOutlined } from '@ant-design/icons';\r\nimport { GlobalContext } from './GlobalContext';\r\nimport moment from 'moment';\r\nimport './Timeline.css';\r\nimport { DataContext } from '../../../context/data';\r\n\r\nconst MAX_UPDATE_INTERVAL = 500;\r\n\r\nexport default function Timeline() {\r\n    const contextID = 'Global';\r\n\r\n    const [ getOptions, setOptions ] = useContext( GlobalContext );\r\n\r\n    let [ dataset ] = React.useContext( DataContext );\r\n\r\n    const { timeline, playing, timeframe, playbackSpeed, previousDays } = getOptions( contextID );\r\n\r\n    const maxDate = Math.floor( moment.duration( timeframe[1].diff( timeframe[0] ) ).asDays() );\r\n\r\n    const marks = {\r\n        0: timeframe[0].format( 'YYYY MMM DD' ),\r\n        [maxDate]: timeframe[1].format( 'YYYY MMM DD' )\r\n    };\r\n\r\n    // Use a cooldown timer while the user is dragging the timeline such that we do not update too often.\r\n    // It will update at most every 500ms (MAX_UPDATE_INTERVAL).\r\n    const [ cooldown, setCooldown ] = useState( false );\r\n\r\n    // Value that ignores cooldown that is used for correct display of the slider\r\n    const [ value, setValue ] = useState( timeline.add(10) );\r\n    const [ diff , setDiff  ] = useState( previousDays );\r\n\r\n    //Animation lock controls\r\n    const [ startLock, setStartLock ] = useState( true );\r\n    const [   endLock, setEndLock   ] = useState( false );\r\n\r\n    // State that contains the dataset dates in sorted order\r\n    const [ sortedDates, setSortedDates ] = useState( [] );\r\n\r\n    const timelineRef = useRef();\r\n\r\n    // Sets default values for the slider\r\n    useEffect( () => {\r\n        setDiff(31);\r\n        setValue(value.add(31, 'days'));\r\n    }, []);\r\n\r\n    // The cooldown will activate when the timeline value is changed.\r\n    useEffect( () => {\r\n        return () => {\r\n            setCooldown( true );\r\n            let timeout = setTimeout( () => {\r\n                setCooldown( false );\r\n            }, MAX_UPDATE_INTERVAL );\r\n\r\n            return () => clearTimeout( timeout );\r\n        };\r\n    }, [ timeline ] );\r\n\r\n\r\n    //Shift the date ranges with the specified offset\r\n    let shift = ( offset ) => {\r\n        let value = moment( timeline );\r\n\r\n        if( !endLock )\r\n            value.add( offset, 'days' );\r\n\r\n        let difference = diff;\r\n\r\n        //Limit the value to the timeframe\r\n        if( value.isAfter( timeframe[ 1 ] ) ) {\r\n            value.subtract( 1, 'days' );\r\n            difference--;\r\n        }\r\n\r\n        if( startLock && !endLock )\r\n            difference = difference + offset;\r\n        else if( !startLock && endLock )\r\n            difference = difference - 1 * offset;\r\n\r\n        //Limit the difference to the timeframe\r\n        if( moment( value ).subtract( difference, 'days' ).isBefore( timeframe[ 0 ] ) )\r\n            difference--;\r\n        if( difference < 0 )\r\n            difference = 0;\r\n\r\n        setValue( value );\r\n        setDiff ( difference );\r\n\r\n        setOptions( contextID, { ...getOptions( contextID ), timeline: value, previousDays: difference } );\r\n    };\r\n\r\n    // useEffect that will trigger going to the next day when we are playing\r\n    useEffect( () => {\r\n\r\n        if ( !playing || playbackSpeed == 0 )\r\n            return;\r\n\r\n        let interval = setTimeout( () => {\r\n\r\n            shift( Math.sign( playbackSpeed ) );\r\n\r\n        }, 500 / Math.abs( playbackSpeed ) );\r\n\r\n        return () => clearTimeout( interval );\r\n\r\n    }, [ playing, timeline, playbackSpeed, getOptions, startLock, endLock ] );\r\n\r\n    // useEffect that sorts the dataset on date to be used for the skip forward and skip back buttons\r\n    useEffect( () => {\r\n        if (!dataset)\r\n            return;\r\n\r\n        let sorted = dataset.sort( ( a, b ) => {\r\n            return a.date - b.date;\r\n        } );\r\n\r\n        sorted = sorted.map( ( row ) => {\r\n            return row.date;\r\n        } );\r\n\r\n        setSortedDates( sorted );\r\n        \r\n    }, [ dataset ] );\r\n\r\n    //Bodgy code to fix the rc-slider node_module to allow for correct dragging behaviour\r\n    //This can be removed when a new version of rc-slider comes out that fixes the issue.\r\n    //Pull request for reference: https://github.com/react-component/slider/pull/760\r\n    useEffect( () => {\r\n\r\n        if( !timelineRef || !timelineRef.current )\r\n            return;\r\n\r\n        //Overwrite the onMove method inside the timelineRef\r\n        timelineRef.current.onMove = ( function( e, position, dragTrack, startBounds ) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            const { state, props } = this;\r\n            const maxValue = props.max || 100; // eslint-disable-line\r\n            const minValue = props.min || 0; // eslint-disable-line\r\n            if (dragTrack) {\r\n                let pos = props.vertical ? -position : position; // eslint-disable-line\r\n                pos = props.reverse ? -pos : pos;                // eslint-disable-line\r\n                const max = maxValue - Math.max(...startBounds);\r\n                const min = minValue - Math.min(...startBounds);\r\n                const ratio = Math.min(Math.max(pos / (this.getSliderLength() / (maxValue - minValue)), min), max);\r\n                const nextBounds = startBounds.map((v) =>\r\n                    Math.floor(Math.max(Math.min(v + ratio, maxValue), minValue))\r\n                );\r\n                if (state.bounds.map((c, i) => c === nextBounds[i]).some((c) => !c)) {\r\n                    this.onChange({\r\n                        bounds: nextBounds\r\n                    });\r\n                }\r\n                return;\r\n            }\r\n            const value = this.calcValueByPos(position);\r\n            const oldValue = state.bounds[state.handle];\r\n            if (value === oldValue) return;\r\n\r\n            this.moveTo(value);\r\n        } ).bind( timelineRef.current );\r\n\r\n    }, [ timelineRef ] );\r\n\r\n    const lockControls = \r\n        <Space className='lock'>\r\n            <Tooltip title={'Lock or unlock the timeline start position when playing.'}>\r\n                <Button type='link' icon={startLock ? <LockFilled/> : <UnlockOutlined/>} onClick={() => setStartLock( !startLock )}>\r\n                    Start\r\n                </Button>\r\n            </Tooltip>\r\n            <Tooltip title={'Lock or unlock the timeline end position when playing.'}>\r\n                <Button type='link' icon={endLock ? <LockFilled/> : <UnlockOutlined/>} onClick={() => setEndLock( !endLock )}>\r\n                    End\r\n                </Button>\r\n            </Tooltip>\r\n        </Space>;\r\n\r\n    const speedControls =\r\n        <Space className='speed'>\r\n            <Dropdown trigger='click' placement='topRight' style={{ paddingRight: 20 }} overlay={\r\n                <Menu>\r\n                    <Menu.Item style={{ textAlign: 'center' }}>Playback Speed</Menu.Item>\r\n                    <Slider\r\n                        style={{ width: 200, margin: '15px 15px 30px 15px' }}\r\n                        min={-4}\r\n                        max={4}\r\n                        step={0.1}\r\n                        marks={{\r\n                            [-4]: '-4',\r\n                            0: '0',\r\n                            4: '4'\r\n                        }}\r\n                        defaultValue={playbackSpeed}\r\n                        onAfterChange={( event ) => {\r\n                            setOptions( contextID, { ...getOptions( contextID ), playbackSpeed: event } );\r\n                        }}\r\n                    />\r\n                </Menu>\r\n            }>\r\n                <Typography.Link>{playbackSpeed}x <DownOutlined/></Typography.Link>\r\n            </Dropdown>\r\n        </Space>;\r\n    return (\r\n        <>\r\n            <Row style={{ padding: '20px 50px 0 50px' }}>\r\n                <Slider\r\n                    ref={timelineRef}\r\n                    marks={marks}\r\n                    max={maxDate}\r\n                    range={{ draggableTrack: true }}\r\n                    value={[ moment( value ).diff( timeframe[0], 'days' ) - diff, moment( value ).diff( timeframe[0], 'days' ) ]}\r\n                    tooltipVisible={cooldown || playing ? true : undefined}\r\n                    style={{ width: '100%' }}\r\n                    onChange={( event ) => {\r\n                        let timeline = moment( timeframe[0] ).add( event[1], 'days' );\r\n\r\n                        setDiff ( event[ 1 ] - event[ 0 ] );\r\n                        setValue( timeline );\r\n\r\n                        // While dragging we check if the cooldown is active, in which case we do not update\r\n                        // We do need to set the value manually for correct display of the slider\r\n                        if ( cooldown )\r\n                            return;\r\n\r\n                        setOptions( contextID, {\r\n                            ...getOptions( contextID ),\r\n                            previousDays: event[ 1 ] - event[ 0 ],\r\n                            timeline: timeline,\r\n                            playing: false\r\n                        } );\r\n                    }}\r\n                    onAfterChange={( event ) => {\r\n                        let timeline = moment( timeframe[0] ).add( event[1], 'days' );\r\n\r\n                        setDiff ( event[ 1 ] - event[ 0 ] );\r\n                        setValue( timeline );\r\n\r\n                        setOptions( contextID, {\r\n                            ...getOptions( contextID ),\r\n                            previousDays: event[ 1 ] - event[ 0 ],\r\n                            timeline: timeline,\r\n                            playing: false\r\n                        } );\r\n                    }}\r\n                    tipFormatter={( value ) => {\r\n                        return moment( timeframe[0] ).add( value, 'days' ).format( 'YYYY MMM DD' );\r\n                    }}\r\n                />\r\n            </Row>\r\n            <Row className='timelineControls' justify='center'>\r\n                {lockControls}\r\n                <Space className='controls'>\r\n                    <Tooltip placement='topLeft' title='Skip to previous change'>\r\n\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => {\r\n                                let value = moment( timeline );\r\n\r\n                                let start = moment( timeline ).subtract( previousDays, 'days' );\r\n                                \r\n                                for( let i = sortedDates.length - 1; i >= 0; i-- ) {\r\n\r\n                                    if( !value.isAfter( sortedDates[ i ] ) ) {\r\n\r\n                                        //Check that we are not at the first element yet\r\n                                        if( i > 0 ) \r\n                                            continue;\r\n\r\n                                        //If no elements match, we set the date to the start\r\n                                        value = moment( timeframe[0] );\r\n                                        \r\n                                    } else {\r\n                                        value = moment( sortedDates[ i ] );\r\n\r\n                                        break;\r\n                                    }\r\n                                    \r\n                                }\r\n\r\n                                let diff = previousDays;\r\n                                \r\n                                if( startLock )\r\n                                    diff = value.diff( start, 'days' );\r\n\r\n                                setValue( value );\r\n                                setDiff ( diff  );\r\n\r\n                                setOptions( contextID, { ...getOptions( contextID ), timeline: value, previousDays: diff } );\r\n                            }}\r\n                            icon={<FastBackwardOutlined style={{ fontSize: 18 }} />}\r\n                        />\r\n\r\n                    </Tooltip>\r\n                    <Tooltip placement='topLeft' title='Skip backward'>\r\n\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => shift( -1 )}\r\n                            icon={<StepBackwardOutlined />}\r\n                        />\r\n                    </Tooltip>\r\n\r\n                    <Tooltip title={playing ? 'Pause' : 'Play'  }>\r\n                        <Button type='primary' onClick={() => {\r\n                            setOptions( contextID, { ...getOptions( contextID ), playing: !playing } );\r\n                        }} icon={playing ? <PauseOutlined /> : <CaretRightOutlined />} />\r\n                    </Tooltip>\r\n\r\n                    <Tooltip placement='topRight' title='Skip forward'>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => shift( 1 )}\r\n                            icon={<StepForwardOutlined />}\r\n                        />\r\n                    </Tooltip>\r\n\r\n                    <Tooltip placement='topRight' title='Skip to next change'>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => {\r\n                                let value = moment( timeline );\r\n                                let start = moment( timeline ).subtract( previousDays, 'days' );\r\n\r\n                                for( let i = 0; i < sortedDates.length; i++ ) {\r\n\r\n                                    if( !value.isBefore( sortedDates[ i ] ) ) {\r\n\r\n                                        //Check that we are not at the last element yet\r\n                                        if( i < sortedDates.length - 1 ) \r\n                                            continue;\r\n\r\n                                        //If no elements match, we set the date to the end\r\n                                        value = moment( timeframe[1] );\r\n                                        \r\n                                    } else {\r\n                                        value = moment( sortedDates[ i ] );\r\n\r\n                                        break;\r\n                                    }\r\n                                    \r\n                                }\r\n\r\n                                let diff = previousDays;\r\n                                \r\n                                if( startLock )\r\n                                    diff = value.diff( start, 'days' );\r\n\r\n                                setValue( value );\r\n                                setDiff ( diff  );\r\n\r\n                                setOptions( contextID, { ...getOptions( contextID ), timeline: value, previousDays: diff } );\r\n                            }}\r\n                            icon={<FastForwardOutlined style={{ fontSize: 18 }}/>}\r\n                        />\r\n                    </Tooltip>\r\n                </Space>\r\n                {speedControls}\r\n            </Row>\r\n            <Row className='timelineSecondary' justify='space-between'>\r\n                {lockControls}\r\n                {speedControls}\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport { GlobalProvider } from './components/GlobalContext';\r\nimport './index.css';\r\nimport OptionsSidebar from './components/OptionsSidebar';\r\nimport VisContainer from './components/VisContainer';\r\nimport Timeline from './components/Timeline';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport default function Visualize() {\r\n    // main render function\r\n    return (\r\n        <GlobalProvider>\r\n            <Layout className='vis-page-container'>\r\n                <OptionsSidebar />\r\n                <Content>\r\n                    {/* This row contains the visualizations */}\r\n                    <VisContainer />\r\n                    {/* This row contains the timeline and timeline controls */}\r\n                    <Timeline />\r\n                </Content>\r\n            </Layout>\r\n        </GlobalProvider>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Switch, Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport Home from './pages/home';\r\nimport About from './pages/about';\r\nimport DataUpload from './pages/DataUpload';\r\nimport Visualize from './pages/visualize';\r\nimport { Menu } from 'antd';\r\nimport { DataProvider } from './context/data';\r\n\r\nfunction App() {\r\n    let selectedKeys = [];\r\n\r\n    if ( useRouteMatch( { path: '/', exact: true } ) )\r\n        selectedKeys.push( 'home' );\r\n    if ( useRouteMatch( '/about' ) )\r\n        selectedKeys.push( 'about' );\r\n    if ( useRouteMatch( '/vis' ) )\r\n        selectedKeys.push( 'visualize' );\r\n    if ( useRouteMatch( '/dataUpload' ) )\r\n        selectedKeys.push( 'dataUpload' );\r\n    return (\r\n        <DataProvider>\r\n            {/* Using the Link component, you can create 'buttons'\r\n            to different pages that the router can handle.\r\n            */}\r\n            <Menu mode='horizontal' selectedKeys={selectedKeys}>\r\n                <Menu.Item key='home'>\r\n                    <Link to='/'>Home</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='about'>\r\n                    <Link to='/about'>About</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='visualize'>\r\n                    <Link to='/vis'>Visualize</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key='dataUpload'>\r\n                    <Link to='/dataUpload'>Data Upload</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n\r\n            {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n            <Switch>\r\n                <Route path='/about'>\r\n                    <About />\r\n                </Route>\r\n                <Route path='/dataUpload'>\r\n                    <DataUpload />\r\n                </Route>\r\n                <Route path='/vis'>\r\n                    <Visualize />\r\n                </Route>\r\n                <Route path='/'>\r\n                    <Home />\r\n                </Route>\r\n            </Switch>\r\n        </DataProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match( /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/ )\r\n);\r\n\r\nexport function register( config ) {\r\n    if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL( process.env.PUBLIC_URL, window.location.href );\r\n\r\n        if ( publicUrl.origin !== window.location.origin ) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener( 'load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if ( isLocalhost ) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker( swUrl, config );\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then( () => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                } );\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW( swUrl, config );\r\n            }\r\n        } );\r\n    }\r\n}\r\n\r\nfunction registerValidSW( swUrl, config ) {\r\n    navigator.serviceWorker\r\n        .register( swUrl )\r\n        .then( ( registration ) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n\r\n                if ( installingWorker == null ) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if ( installingWorker.state === 'installed' ) {\r\n                        if ( navigator.serviceWorker.controller ) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if ( config && config.onUpdate ) {\r\n                                config.onUpdate( registration );\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log( 'Content is cached for offline use.' );\r\n\r\n                            // Execute callback\r\n                            if ( config && config.onSuccess ) {\r\n                                config.onSuccess( registration );\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        } )\r\n        .catch( ( error ) => {\r\n            console.error( 'Error during service worker registration:', error );\r\n        } );\r\n}\r\n\r\nfunction checkValidServiceWorker( swUrl, config ) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch( swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    } )\r\n        .then( ( response ) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get( 'content-type' );\r\n\r\n            if (\r\n                response.status === 404 ||\r\n        ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then( ( registration ) => {\r\n                    registration.unregister().then( () => {\r\n                        window.location.reload();\r\n                    } );\r\n                } );\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW( swUrl, config );\r\n            }\r\n        } )\r\n        .catch( () => {\r\n            console.log( 'No internet connection found. App is running in offline mode.' );\r\n        } );\r\n}\r\n\r\nexport function unregister() {\r\n    if ( 'serviceWorker' in navigator ) {\r\n        navigator.serviceWorker.ready\r\n            .then( ( registration ) => {\r\n                registration.unregister();\r\n            } )\r\n            .catch( ( error ) => {\r\n                console.error( error.message );\r\n            } );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport './index.less';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById( 'root' )\r\n);\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}